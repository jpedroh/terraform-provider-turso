// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddLocationToGroupParams is parameters of addLocationToGroup operation.
type AddLocationToGroupParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
	// The location code to add to the group.
	Location string
}

func unpackAddLocationToGroupParams(packed middleware.Parameters) (params AddLocationToGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "path",
		}
		params.Location = packed[key].(string)
	}
	return params
}

func decodeAddLocationToGroupParams(args [3]string, argsEscaped bool, r *http.Request) (params AddLocationToGroupParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: location.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "location",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Location = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AddOrganizationMemberParams is parameters of addOrganizationMember operation.
type AddOrganizationMemberParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackAddOrganizationMemberParams(packed middleware.Parameters) (params AddOrganizationMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeAddOrganizationMemberParams(args [1]string, argsEscaped bool, r *http.Request) (params AddOrganizationMemberParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateAPITokenParams is parameters of createAPIToken operation.
type CreateAPITokenParams struct {
	// The name of the api token.
	TokenName string
}

func unpackCreateAPITokenParams(packed middleware.Parameters) (params CreateAPITokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "tokenName",
			In:   "path",
		}
		params.TokenName = packed[key].(string)
	}
	return params
}

func decodeCreateAPITokenParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateAPITokenParams, _ error) {
	// Decode path: tokenName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tokenName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TokenName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tokenName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDatabaseParams is parameters of createDatabase operation.
type CreateDatabaseParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackCreateDatabaseParams(packed middleware.Parameters) (params CreateDatabaseParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeCreateDatabaseParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDatabaseParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDatabaseTokenParams is parameters of createDatabaseToken operation.
type CreateDatabaseTokenParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
	// Expiration time for the token (e.g., 2w1d30m).
	Expiration OptString
	// Authorization level for the token (full-access or read-only).
	Authorization OptCreateDatabaseTokenAuthorization
}

func unpackCreateDatabaseTokenParams(packed middleware.Parameters) (params CreateDatabaseTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "expiration",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Expiration = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "authorization",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Authorization = v.(OptCreateDatabaseTokenAuthorization)
		}
	}
	return params
}

func decodeCreateDatabaseTokenParams(args [2]string, argsEscaped bool, r *http.Request) (params CreateDatabaseTokenParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: expiration.
	{
		val := string("never")
		params.Expiration.SetTo(val)
	}
	// Decode query: expiration.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "expiration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotExpirationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotExpirationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Expiration.SetTo(paramsDotExpirationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expiration",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: authorization.
	{
		val := CreateDatabaseTokenAuthorization("full-access")
		params.Authorization.SetTo(val)
	}
	// Decode query: authorization.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "authorization",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorizationVal CreateDatabaseTokenAuthorization
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAuthorizationVal = CreateDatabaseTokenAuthorization(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Authorization.SetTo(paramsDotAuthorizationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Authorization.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "authorization",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// CreateGroupParams is parameters of createGroup operation.
type CreateGroupParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackCreateGroupParams(packed middleware.Parameters) (params CreateGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeCreateGroupParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateGroupParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateGroupTokenParams is parameters of createGroupToken operation.
type CreateGroupTokenParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
	// Expiration time for the token (e.g., 2w1d30m).
	Expiration OptString
	// Authorization level for the token (full-access or read-only).
	Authorization OptCreateGroupTokenAuthorization
}

func unpackCreateGroupTokenParams(packed middleware.Parameters) (params CreateGroupTokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "expiration",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Expiration = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "authorization",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Authorization = v.(OptCreateGroupTokenAuthorization)
		}
	}
	return params
}

func decodeCreateGroupTokenParams(args [2]string, argsEscaped bool, r *http.Request) (params CreateGroupTokenParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	// Set default value for query: expiration.
	{
		val := string("never")
		params.Expiration.SetTo(val)
	}
	// Decode query: expiration.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "expiration",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotExpirationVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotExpirationVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Expiration.SetTo(paramsDotExpirationVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "expiration",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: authorization.
	{
		val := CreateGroupTokenAuthorization("full-access")
		params.Authorization.SetTo(val)
	}
	// Decode query: authorization.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "authorization",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAuthorizationVal CreateGroupTokenAuthorization
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotAuthorizationVal = CreateGroupTokenAuthorization(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Authorization.SetTo(paramsDotAuthorizationVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Authorization.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "authorization",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDatabaseParams is parameters of deleteDatabase operation.
type DeleteDatabaseParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
}

func unpackDeleteDatabaseParams(packed middleware.Parameters) (params DeleteDatabaseParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeDeleteDatabaseParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteDatabaseParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteGroupParams is parameters of deleteGroup operation.
type DeleteGroupParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
}

func unpackDeleteGroupParams(packed middleware.Parameters) (params DeleteGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeDeleteGroupParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteGroupParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteOrganizationInviteByEmailParams is parameters of deleteOrganizationInviteByEmail operation.
type DeleteOrganizationInviteByEmailParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	Email            string
}

func unpackDeleteOrganizationInviteByEmailParams(packed middleware.Parameters) (params DeleteOrganizationInviteByEmailParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "email",
			In:   "path",
		}
		params.Email = packed[key].(string)
	}
	return params
}

func decodeDeleteOrganizationInviteByEmailParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteOrganizationInviteByEmailParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: email.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "email",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Email = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "email",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDatabaseParams is parameters of getDatabase operation.
type GetDatabaseParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
}

func unpackGetDatabaseParams(packed middleware.Parameters) (params GetDatabaseParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeGetDatabaseParams(args [2]string, argsEscaped bool, r *http.Request) (params GetDatabaseParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDatabaseConfigurationParams is parameters of getDatabaseConfiguration operation.
type GetDatabaseConfigurationParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
}

func unpackGetDatabaseConfigurationParams(packed middleware.Parameters) (params GetDatabaseConfigurationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeGetDatabaseConfigurationParams(args [2]string, argsEscaped bool, r *http.Request) (params GetDatabaseConfigurationParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDatabaseInstanceParams is parameters of getDatabaseInstance operation.
type GetDatabaseInstanceParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
	// The name of the instance (location code).
	InstanceName string
}

func unpackGetDatabaseInstanceParams(packed middleware.Parameters) (params GetDatabaseInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "instanceName",
			In:   "path",
		}
		params.InstanceName = packed[key].(string)
	}
	return params
}

func decodeGetDatabaseInstanceParams(args [3]string, argsEscaped bool, r *http.Request) (params GetDatabaseInstanceParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: instanceName.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "instanceName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.InstanceName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "instanceName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDatabaseStatsParams is parameters of getDatabaseStats operation.
type GetDatabaseStatsParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
}

func unpackGetDatabaseStatsParams(packed middleware.Parameters) (params GetDatabaseStatsParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeGetDatabaseStatsParams(args [2]string, argsEscaped bool, r *http.Request) (params GetDatabaseStatsParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDatabaseUsageParams is parameters of getDatabaseUsage operation.
type GetDatabaseUsageParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
	// The datetime to retrieve usage **from** in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
	// format. Defaults to the current calendar month if not provided. Example: `2023-01-01T00:00:00Z`.
	From OptDateTime
	// The datetime to retrieve usage **to** in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	//  Defaults to the current calendar month if not provided. Example: `2023-02-01T00:00:00Z`.
	To OptDateTime
}

func unpackGetDatabaseUsageParams(packed middleware.Parameters) (params GetDatabaseUsageParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.To = v.(OptDateTime)
		}
	}
	return params
}

func decodeGetDatabaseUsageParams(args [2]string, argsEscaped bool, r *http.Request) (params GetDatabaseUsageParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.To.SetTo(paramsDotToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetGroupParams is parameters of getGroup operation.
type GetGroupParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
}

func unpackGetGroupParams(packed middleware.Parameters) (params GetGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeGetGroupParams(args [2]string, argsEscaped bool, r *http.Request) (params GetGroupParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrganizationParams is parameters of getOrganization operation.
type GetOrganizationParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackGetOrganizationParams(packed middleware.Parameters) (params GetOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeGetOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOrganizationParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrganizationMemberParams is parameters of getOrganizationMember operation.
type GetOrganizationMemberParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The username of a Turso user or organization member.
	Username string
}

func unpackGetOrganizationMemberParams(packed middleware.Parameters) (params GetOrganizationMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(string)
	}
	return params
}

func decodeGetOrganizationMemberParams(args [2]string, argsEscaped bool, r *http.Request) (params GetOrganizationMemberParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrganizationSubscriptionParams is parameters of getOrganizationSubscription operation.
type GetOrganizationSubscriptionParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackGetOrganizationSubscriptionParams(packed middleware.Parameters) (params GetOrganizationSubscriptionParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeGetOrganizationSubscriptionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOrganizationSubscriptionParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOrganizationUsageParams is parameters of getOrganizationUsage operation.
type GetOrganizationUsageParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackGetOrganizationUsageParams(packed middleware.Parameters) (params GetOrganizationUsageParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeGetOrganizationUsageParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOrganizationUsageParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// InvalidateDatabaseTokensParams is parameters of invalidateDatabaseTokens operation.
type InvalidateDatabaseTokensParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
}

func unpackInvalidateDatabaseTokensParams(packed middleware.Parameters) (params InvalidateDatabaseTokensParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeInvalidateDatabaseTokensParams(args [2]string, argsEscaped bool, r *http.Request) (params InvalidateDatabaseTokensParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// InvalidateGroupTokensParams is parameters of invalidateGroupTokens operation.
type InvalidateGroupTokensParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
}

func unpackInvalidateGroupTokensParams(packed middleware.Parameters) (params InvalidateGroupTokensParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeInvalidateGroupTokensParams(args [2]string, argsEscaped bool, r *http.Request) (params InvalidateGroupTokensParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// InviteOrganizationMemberParams is parameters of inviteOrganizationMember operation.
type InviteOrganizationMemberParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackInviteOrganizationMemberParams(packed middleware.Parameters) (params InviteOrganizationMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeInviteOrganizationMemberParams(args [1]string, argsEscaped bool, r *http.Request) (params InviteOrganizationMemberParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListDatabaseInstancesParams is parameters of listDatabaseInstances operation.
type ListDatabaseInstancesParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
}

func unpackListDatabaseInstancesParams(packed middleware.Parameters) (params ListDatabaseInstancesParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeListDatabaseInstancesParams(args [2]string, argsEscaped bool, r *http.Request) (params ListDatabaseInstancesParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListDatabasesParams is parameters of listDatabases operation.
type ListDatabasesParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// Filter databases by group name.
	Group OptString
	// The schema database name that can be used to get databases that belong to that parent schema.
	Schema OptString
}

func unpackListDatabasesParams(packed middleware.Parameters) (params ListDatabasesParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "group",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Group = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "schema",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Schema = v.(OptString)
		}
	}
	return params
}

func decodeListDatabasesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListDatabasesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: group.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "group",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGroupVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Group.SetTo(paramsDotGroupVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "group",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: schema.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "schema",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSchemaVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSchemaVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Schema.SetTo(paramsDotSchemaVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schema",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListGroupsParams is parameters of listGroups operation.
type ListGroupsParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackListGroupsParams(packed middleware.Parameters) (params ListGroupsParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeListGroupsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListGroupsParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListOrganizationAuditLogsParams is parameters of listOrganizationAuditLogs operation.
type ListOrganizationAuditLogsParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The limit of items to return per page. Defaults to 100.
	PageSize OptInt
	// The page number to return. Defaults to 1.
	Page OptInt
}

func unpackListOrganizationAuditLogsParams(packed middleware.Parameters) (params ListOrganizationAuditLogsParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "page_size",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PageSize = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	return params
}

func decodeListOrganizationAuditLogsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListOrganizationAuditLogsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: page_size.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page_size",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageSizeVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageSizeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PageSize.SetTo(paramsDotPageSizeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page_size",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListOrganizationInvitesParams is parameters of listOrganizationInvites operation.
type ListOrganizationInvitesParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackListOrganizationInvitesParams(packed middleware.Parameters) (params ListOrganizationInvitesParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeListOrganizationInvitesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListOrganizationInvitesParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListOrganizationInvoicesParams is parameters of listOrganizationInvoices operation.
type ListOrganizationInvoicesParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The type of invoice to retrieve.
	Type OptListOrganizationInvoicesType
}

func unpackListOrganizationInvoicesParams(packed middleware.Parameters) (params ListOrganizationInvoicesParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptListOrganizationInvoicesType)
		}
	}
	return params
}

func decodeListOrganizationInvoicesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListOrganizationInvoicesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal ListOrganizationInvoicesType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = ListOrganizationInvoicesType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListOrganizationMembersParams is parameters of listOrganizationMembers operation.
type ListOrganizationMembersParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackListOrganizationMembersParams(packed middleware.Parameters) (params ListOrganizationMembersParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeListOrganizationMembersParams(args [1]string, argsEscaped bool, r *http.Request) (params ListOrganizationMembersParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListOrganizationPlansParams is parameters of listOrganizationPlans operation.
type ListOrganizationPlansParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackListOrganizationPlansParams(packed middleware.Parameters) (params ListOrganizationPlansParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeListOrganizationPlansParams(args [1]string, argsEscaped bool, r *http.Request) (params ListOrganizationPlansParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveLocationFromGroupParams is parameters of removeLocationFromGroup operation.
type RemoveLocationFromGroupParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
	// The location code to remove from the group.
	Location string
}

func unpackRemoveLocationFromGroupParams(packed middleware.Parameters) (params RemoveLocationFromGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "location",
			In:   "path",
		}
		params.Location = packed[key].(string)
	}
	return params
}

func decodeRemoveLocationFromGroupParams(args [3]string, argsEscaped bool, r *http.Request) (params RemoveLocationFromGroupParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: location.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "location",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Location = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "location",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveOrganizationMemberParams is parameters of removeOrganizationMember operation.
type RemoveOrganizationMemberParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The username of a Turso user or organization member.
	Username string
}

func unpackRemoveOrganizationMemberParams(packed middleware.Parameters) (params RemoveOrganizationMemberParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(string)
	}
	return params
}

func decodeRemoveOrganizationMemberParams(args [2]string, argsEscaped bool, r *http.Request) (params RemoveOrganizationMemberParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RevokeAPITokenParams is parameters of revokeAPIToken operation.
type RevokeAPITokenParams struct {
	// The name of the api token.
	TokenName string
}

func unpackRevokeAPITokenParams(packed middleware.Parameters) (params RevokeAPITokenParams) {
	{
		key := middleware.ParameterKey{
			Name: "tokenName",
			In:   "path",
		}
		params.TokenName = packed[key].(string)
	}
	return params
}

func decodeRevokeAPITokenParams(args [1]string, argsEscaped bool, r *http.Request) (params RevokeAPITokenParams, _ error) {
	// Decode path: tokenName.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "tokenName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.TokenName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tokenName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TransferGroupParams is parameters of transferGroup operation.
type TransferGroupParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
}

func unpackTransferGroupParams(packed middleware.Parameters) (params TransferGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeTransferGroupParams(args [2]string, argsEscaped bool, r *http.Request) (params TransferGroupParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UnarchiveGroupParams is parameters of unarchiveGroup operation.
type UnarchiveGroupParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
}

func unpackUnarchiveGroupParams(packed middleware.Parameters) (params UnarchiveGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeUnarchiveGroupParams(args [2]string, argsEscaped bool, r *http.Request) (params UnarchiveGroupParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDatabaseConfigurationParams is parameters of updateDatabaseConfiguration operation.
type UpdateDatabaseConfigurationParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the database.
	DatabaseName string
}

func unpackUpdateDatabaseConfigurationParams(packed middleware.Parameters) (params UpdateDatabaseConfigurationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "databaseName",
			In:   "path",
		}
		params.DatabaseName = packed[key].(string)
	}
	return params
}

func decodeUpdateDatabaseConfigurationParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateDatabaseConfigurationParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: databaseName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "databaseName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DatabaseName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "databaseName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateGroupDatabasesParams is parameters of updateGroupDatabases operation.
type UpdateGroupDatabasesParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The name of the group.
	GroupName string
}

func unpackUpdateGroupDatabasesParams(packed middleware.Parameters) (params UpdateGroupDatabasesParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "groupName",
			In:   "path",
		}
		params.GroupName = packed[key].(string)
	}
	return params
}

func decodeUpdateGroupDatabasesParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateGroupDatabasesParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: groupName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "groupName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.GroupName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateMemberRoleParams is parameters of updateMemberRole operation.
type UpdateMemberRoleParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
	// The username of a Turso user or organization member.
	Username string
}

func unpackUpdateMemberRoleParams(packed middleware.Parameters) (params UpdateMemberRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(string)
	}
	return params
}

func decodeUpdateMemberRoleParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateMemberRoleParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Username = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateOrganizationParams is parameters of updateOrganization operation.
type UpdateOrganizationParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackUpdateOrganizationParams(packed middleware.Parameters) (params UpdateOrganizationParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeUpdateOrganizationParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateOrganizationParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UploadDatabaseDumpParams is parameters of uploadDatabaseDump operation.
type UploadDatabaseDumpParams struct {
	// The slug of the organization or user account.
	OrganizationSlug string
}

func unpackUploadDatabaseDumpParams(packed middleware.Parameters) (params UploadDatabaseDumpParams) {
	{
		key := middleware.ParameterKey{
			Name: "organizationSlug",
			In:   "path",
		}
		params.OrganizationSlug = packed[key].(string)
	}
	return params
}

func decodeUploadDatabaseDumpParams(args [1]string, argsEscaped bool, r *http.Request) (params UploadDatabaseDumpParams, _ error) {
	// Decode path: organizationSlug.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "organizationSlug",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrganizationSlug = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "organizationSlug",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
