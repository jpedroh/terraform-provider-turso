// Code generated by ogen, DO NOT EDIT.

package client

import (
	"context"

	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// AddLocationToGroup implements addLocationToGroup operation.
//
// Adds a location to the specified group.
//
// POST /v1/organizations/{organizationSlug}/groups/{groupName}/locations/{location}
func (UnimplementedHandler) AddLocationToGroup(ctx context.Context, params AddLocationToGroupParams) (r AddLocationToGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// AddOrganizationMember implements addOrganizationMember operation.
//
// Add an existing Turso user to an organization.
//
// POST /v1/organizations/{organizationSlug}/members
func (UnimplementedHandler) AddOrganizationMember(ctx context.Context, req *AddOrganizationMemberReq, params AddOrganizationMemberParams) (r AddOrganizationMemberRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateAPIToken implements createAPIToken operation.
//
// Returns a new API token belonging to a user.
//
// POST /v1/auth/api-tokens/{tokenName}
func (UnimplementedHandler) CreateAPIToken(ctx context.Context, params CreateAPITokenParams) (r jx.Raw, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateDatabase implements createDatabase operation.
//
// Creates a new database in a group for the organization or user.
//
// POST /v1/organizations/{organizationSlug}/databases
func (UnimplementedHandler) CreateDatabase(ctx context.Context, req *CreateDatabaseInput, params CreateDatabaseParams) (r CreateDatabaseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateDatabaseToken implements createDatabaseToken operation.
//
// Generates an authorization token for the specified database.
//
// POST /v1/organizations/{organizationSlug}/databases/{databaseName}/auth/tokens
func (UnimplementedHandler) CreateDatabaseToken(ctx context.Context, req OptCreateTokenInput, params CreateDatabaseTokenParams) (r CreateDatabaseTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateGroup implements createGroup operation.
//
// Creates a new group for the organization or user.
//
// POST /v1/organizations/{organizationSlug}/groups
func (UnimplementedHandler) CreateGroup(ctx context.Context, req *NewGroup, params CreateGroupParams) (r CreateGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateGroupToken implements createGroupToken operation.
//
// Generates an authorization token for the specified group.
//
// POST /v1/organizations/{organizationSlug}/groups/{groupName}/auth/tokens
func (UnimplementedHandler) CreateGroupToken(ctx context.Context, req OptCreateTokenInput, params CreateGroupTokenParams) (r CreateGroupTokenRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteDatabase implements deleteDatabase operation.
//
// Delete a database belonging to the organization or user.
//
// DELETE /v1/organizations/{organizationSlug}/databases/{databaseName}
func (UnimplementedHandler) DeleteDatabase(ctx context.Context, params DeleteDatabaseParams) (r DeleteDatabaseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteGroup implements deleteGroup operation.
//
// Delete a group belonging to the organization or user.
//
// DELETE /v1/organizations/{organizationSlug}/groups/{groupName}
func (UnimplementedHandler) DeleteGroup(ctx context.Context, params DeleteGroupParams) (r DeleteGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteOrganizationInviteByEmail implements deleteOrganizationInviteByEmail operation.
//
// Delete an invite for the organization by email.
//
// DELETE /v1/organizations/{organizationSlug}/invites/{email}
func (UnimplementedHandler) DeleteOrganizationInviteByEmail(ctx context.Context, params DeleteOrganizationInviteByEmailParams) (r DeleteOrganizationInviteByEmailRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabase implements getDatabase operation.
//
// Returns a database belonging to the organization or user.
//
// GET /v1/organizations/{organizationSlug}/databases/{databaseName}
func (UnimplementedHandler) GetDatabase(ctx context.Context, params GetDatabaseParams) (r GetDatabaseRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabaseConfiguration implements getDatabaseConfiguration operation.
//
// Retrieve an individual database configuration belonging to the organization or user.
//
// GET /v1/organizations/{organizationSlug}/databases/{databaseName}/configuration
func (UnimplementedHandler) GetDatabaseConfiguration(ctx context.Context, params GetDatabaseConfigurationParams) (r *DatabaseConfigurationResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabaseInstance implements getDatabaseInstance operation.
//
// Return the individual database instance by name.
//
// GET /v1/organizations/{organizationSlug}/databases/{databaseName}/instances/{instanceName}
func (UnimplementedHandler) GetDatabaseInstance(ctx context.Context, params GetDatabaseInstanceParams) (r *GetDatabaseInstanceOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabaseStats implements getDatabaseStats operation.
//
// Fetch the top queries of a database, including the count of rows read and written.
//
// GET /v1/organizations/{organizationSlug}/databases/{databaseName}/stats
func (UnimplementedHandler) GetDatabaseStats(ctx context.Context, params GetDatabaseStatsParams) (r GetDatabaseStatsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDatabaseUsage implements getDatabaseUsage operation.
//
// Fetch activity usage for a database in a given time period.
//
// GET /v1/organizations/{organizationSlug}/databases/{databaseName}/usage
func (UnimplementedHandler) GetDatabaseUsage(ctx context.Context, params GetDatabaseUsageParams) (r GetDatabaseUsageRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetGroup implements getGroup operation.
//
// Returns a group belonging to the organization or user.
//
// GET /v1/organizations/{organizationSlug}/groups/{groupName}
func (UnimplementedHandler) GetGroup(ctx context.Context, params GetGroupParams) (r GetGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetGroupConfiguration implements getGroupConfiguration operation.
//
// Retrieve an individual group configuration belonging to the organization or user.
//
// GET /v1/organizations/{organizationSlug}/groups/{groupName}/configuration
func (UnimplementedHandler) GetGroupConfiguration(ctx context.Context, params GetGroupConfigurationParams) (r *GroupConfigurationResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganization implements getOrganization operation.
//
// Retrieve details of a specific organization.
//
// GET /v1/organizations/{organizationSlug}
func (UnimplementedHandler) GetOrganization(ctx context.Context, params GetOrganizationParams) (r GetOrganizationRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganizationMember implements getOrganizationMember operation.
//
// Retrieve details of a specific member in the organization.
//
// GET /v1/organizations/{organizationSlug}/members/{username}
func (UnimplementedHandler) GetOrganizationMember(ctx context.Context, params GetOrganizationMemberParams) (r GetOrganizationMemberRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganizationSubscription implements getOrganizationSubscription operation.
//
// Returns the current subscription details for the organization.
//
// GET /v1/organizations/{organizationSlug}/subscription
func (UnimplementedHandler) GetOrganizationSubscription(ctx context.Context, params GetOrganizationSubscriptionParams) (r *GetOrganizationSubscriptionOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOrganizationUsage implements getOrganizationUsage operation.
//
// Fetch current billing cycle usage for an organization.
//
// GET /v1/organizations/{organizationSlug}/usage
func (UnimplementedHandler) GetOrganizationUsage(ctx context.Context, params GetOrganizationUsageParams) (r *GetOrganizationUsageOK, _ error) {
	return r, ht.ErrNotImplemented
}

// InvalidateDatabaseTokens implements invalidateDatabaseTokens operation.
//
// Invalidates all authorization tokens for the specified database.
//
// POST /v1/organizations/{organizationSlug}/databases/{databaseName}/auth/rotate
func (UnimplementedHandler) InvalidateDatabaseTokens(ctx context.Context, params InvalidateDatabaseTokensParams) (r InvalidateDatabaseTokensRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InvalidateGroupTokens implements invalidateGroupTokens operation.
//
// Invalidates all authorization tokens for the specified group.
//
// POST /v1/organizations/{organizationSlug}/groups/{groupName}/auth/rotate
func (UnimplementedHandler) InvalidateGroupTokens(ctx context.Context, params InvalidateGroupTokensParams) (r InvalidateGroupTokensRes, _ error) {
	return r, ht.ErrNotImplemented
}

// InviteOrganizationMember implements inviteOrganizationMember operation.
//
// Invite a user (who isn't already a Turso user) to an organization.
//
// POST /v1/organizations/{organizationSlug}/invites
func (UnimplementedHandler) InviteOrganizationMember(ctx context.Context, req *InviteOrganizationMemberReq, params InviteOrganizationMemberParams) (r *InviteOrganizationMemberOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListAPITokens implements listAPITokens operation.
//
// Returns a list of API tokens belonging to a user.
//
// GET /v1/auth/api-tokens
func (UnimplementedHandler) ListAPITokens(ctx context.Context) (r *ListAPITokensOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListDatabaseInstances implements listDatabaseInstances operation.
//
// Returns a list of instances of a database. Instances are the individual primary or replica
// databases in each region defined by the group.
//
// GET /v1/organizations/{organizationSlug}/databases/{databaseName}/instances
func (UnimplementedHandler) ListDatabaseInstances(ctx context.Context, params ListDatabaseInstancesParams) (r *ListDatabaseInstancesOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListDatabases implements listDatabases operation.
//
// Returns a list of databases belonging to the organization or user.
//
// GET /v1/organizations/{organizationSlug}/databases
func (UnimplementedHandler) ListDatabases(ctx context.Context, params ListDatabasesParams) (r *ListDatabasesOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListGroups implements listGroups operation.
//
// Returns a list of groups belonging to the organization or user.
//
// GET /v1/organizations/{organizationSlug}/groups
func (UnimplementedHandler) ListGroups(ctx context.Context, params ListGroupsParams) (r *ListGroupsOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListLocations implements listLocations operation.
//
// Returns a list of locations where you can create or replicate databases.
//
// GET /v1/locations
func (UnimplementedHandler) ListLocations(ctx context.Context) (r *ListLocationsOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListOrganizationAuditLogs implements listOrganizationAuditLogs operation.
//
// Return the audit logs for the given organization, ordered by the `created_at` field in descending
// order.
//
// GET /v1/organizations/{organizationSlug}/audit-logs
func (UnimplementedHandler) ListOrganizationAuditLogs(ctx context.Context, params ListOrganizationAuditLogsParams) (r *ListOrganizationAuditLogsOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListOrganizationInvites implements listOrganizationInvites operation.
//
// Returns a list of invites for the organization.
//
// GET /v1/organizations/{organizationSlug}/invites
func (UnimplementedHandler) ListOrganizationInvites(ctx context.Context, params ListOrganizationInvitesParams) (r *ListOrganizationInvitesOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListOrganizationInvoices implements listOrganizationInvoices operation.
//
// Returns a list of invoices for the organization.
//
// GET /v1/organizations/{organizationSlug}/invoices
func (UnimplementedHandler) ListOrganizationInvoices(ctx context.Context, params ListOrganizationInvoicesParams) (r *ListOrganizationInvoicesOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListOrganizationMembers implements listOrganizationMembers operation.
//
// Returns a list of members part of the organization.
//
// GET /v1/organizations/{organizationSlug}/members
func (UnimplementedHandler) ListOrganizationMembers(ctx context.Context, params ListOrganizationMembersParams) (r *ListOrganizationMembersOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListOrganizationPlans implements listOrganizationPlans operation.
//
// Returns a list of available plans and their quotas.
//
// GET /v1/organizations/{organizationSlug}/plans
func (UnimplementedHandler) ListOrganizationPlans(ctx context.Context, params ListOrganizationPlansParams) (r *ListOrganizationPlansOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ListOrganizations implements listOrganizations operation.
//
// Returns a list of organizations the authenticated user owns or is a member of.
//
// GET /v1/organizations
func (UnimplementedHandler) ListOrganizations(ctx context.Context) (r []Organization, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveLocationFromGroup implements removeLocationFromGroup operation.
//
// Removes a location from the specified group.
//
// DELETE /v1/organizations/{organizationSlug}/groups/{groupName}/locations/{location}
func (UnimplementedHandler) RemoveLocationFromGroup(ctx context.Context, params RemoveLocationFromGroupParams) (r RemoveLocationFromGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RemoveOrganizationMember implements removeOrganizationMember operation.
//
// Remove a user from the organization by username.
//
// DELETE /v1/organizations/{organizationSlug}/members/{username}
func (UnimplementedHandler) RemoveOrganizationMember(ctx context.Context, params RemoveOrganizationMemberParams) (r RemoveOrganizationMemberRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RevokeAPIToken implements revokeAPIToken operation.
//
// Revokes the provided API token belonging to a user.
//
// DELETE /v1/auth/api-tokens/{tokenName}
func (UnimplementedHandler) RevokeAPIToken(ctx context.Context, params RevokeAPITokenParams) (r jx.Raw, _ error) {
	return r, ht.ErrNotImplemented
}

// TransferGroup implements transferGroup operation.
//
// Transfer a group to another organization that you own or a member of.
//
// POST /v1/organizations/{organizationSlug}/groups/{groupName}/transfer
func (UnimplementedHandler) TransferGroup(ctx context.Context, req *TransferGroupReq, params TransferGroupParams) (r TransferGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UnarchiveGroup implements unarchiveGroup operation.
//
// Unarchive a group that has been archived due to inactivity.
//
// POST /v1/organizations/{organizationSlug}/groups/{groupName}/unarchive
func (UnimplementedHandler) UnarchiveGroup(ctx context.Context, params UnarchiveGroupParams) (r UnarchiveGroupRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateDatabaseConfiguration implements updateDatabaseConfiguration operation.
//
// Update a database configuration belonging to the organization or user.
//
// PATCH /v1/organizations/{organizationSlug}/databases/{databaseName}/configuration
func (UnimplementedHandler) UpdateDatabaseConfiguration(ctx context.Context, req *DatabaseConfigurationInput, params UpdateDatabaseConfigurationParams) (r *DatabaseConfigurationResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateGroupConfiguration implements updateGroupConfiguration operation.
//
// Update a group configuration belonging to the organization or user.
//
// PATCH /v1/organizations/{organizationSlug}/groups/{groupName}/configuration
func (UnimplementedHandler) UpdateGroupConfiguration(ctx context.Context, req *GroupConfigurationInput, params UpdateGroupConfigurationParams) (r *GroupConfigurationResponse, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateGroupDatabases implements updateGroupDatabases operation.
//
// Updates all databases in the group to the latest libSQL version.
//
// POST /v1/organizations/{organizationSlug}/groups/{groupName}/update
func (UnimplementedHandler) UpdateGroupDatabases(ctx context.Context, params UpdateGroupDatabasesParams) (r UpdateGroupDatabasesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateMemberRole implements updateMemberRole operation.
//
// Update the role of an organization member. Only organization admins or owners can perform this
// action.
//
// PATCH /v1/organizations/{organizationSlug}/members/{username}
func (UnimplementedHandler) UpdateMemberRole(ctx context.Context, req *UpdateMemberRoleReq, params UpdateMemberRoleParams) (r UpdateMemberRoleRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateOrganization implements updateOrganization operation.
//
// Update an organization you own or are a member of.
//
// PATCH /v1/organizations/{organizationSlug}
func (UnimplementedHandler) UpdateOrganization(ctx context.Context, req *UpdateOrganizationReq, params UpdateOrganizationParams) (r *UpdateOrganizationOK, _ error) {
	return r, ht.ErrNotImplemented
}

// ValidateAPIToken implements validateAPIToken operation.
//
// Validates an API token belonging to a user.
//
// GET /v1/auth/validate
func (UnimplementedHandler) ValidateAPIToken(ctx context.Context) (r *ValidateAPITokenOK, _ error) {
	return r, ht.ErrNotImplemented
}
