// Code generated by ogen, DO NOT EDIT.

package client

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #/components/schemas/APIToken
type APIToken struct {
	// The name given to the API Token.
	Name OptString `json:"name"`
	// The ID generated by Turso for the API Token.
	ID OptString `json:"id"`
}

// GetName returns the value of Name.
func (s *APIToken) GetName() OptString {
	return s.Name
}

// GetID returns the value of ID.
func (s *APIToken) GetID() OptString {
	return s.ID
}

// SetName sets the value of Name.
func (s *APIToken) SetName(val OptString) {
	s.Name = val
}

// SetID sets the value of ID.
func (s *APIToken) SetID(val OptString) {
	s.ID = val
}

type AddLocationToGroupBadRequest struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *AddLocationToGroupBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *AddLocationToGroupBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*AddLocationToGroupBadRequest) addLocationToGroupRes() {}

type AddLocationToGroupOK struct {
	// The group with the added location.
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *AddLocationToGroupOK) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *AddLocationToGroupOK) SetGroup(val OptGroup) {
	s.Group = val
}

func (*AddLocationToGroupOK) addLocationToGroupRes() {}

type AddOrganizationMemberConflict struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *AddOrganizationMemberConflict) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *AddOrganizationMemberConflict) SetError(val OptString) {
	s.Error = val
}

func (*AddOrganizationMemberConflict) addOrganizationMemberRes() {}

type AddOrganizationMemberNotFound struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *AddOrganizationMemberNotFound) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *AddOrganizationMemberNotFound) SetError(val OptString) {
	s.Error = val
}

func (*AddOrganizationMemberNotFound) addOrganizationMemberRes() {}

type AddOrganizationMemberOK struct {
	Member OptUsername `json:"member"`
	Role   OptRole     `json:"role"`
}

// GetMember returns the value of Member.
func (s *AddOrganizationMemberOK) GetMember() OptUsername {
	return s.Member
}

// GetRole returns the value of Role.
func (s *AddOrganizationMemberOK) GetRole() OptRole {
	return s.Role
}

// SetMember sets the value of Member.
func (s *AddOrganizationMemberOK) SetMember(val OptUsername) {
	s.Member = val
}

// SetRole sets the value of Role.
func (s *AddOrganizationMemberOK) SetRole(val OptRole) {
	s.Role = val
}

func (*AddOrganizationMemberOK) addOrganizationMemberRes() {}

type AddOrganizationMemberReq struct {
	// The username of an existing Turso user.
	Username OptString `json:"username"`
	// The role given to the user.
	Role OptAddOrganizationMemberReqRole `json:"role"`
}

// GetUsername returns the value of Username.
func (s *AddOrganizationMemberReq) GetUsername() OptString {
	return s.Username
}

// GetRole returns the value of Role.
func (s *AddOrganizationMemberReq) GetRole() OptAddOrganizationMemberReqRole {
	return s.Role
}

// SetUsername sets the value of Username.
func (s *AddOrganizationMemberReq) SetUsername(val OptString) {
	s.Username = val
}

// SetRole sets the value of Role.
func (s *AddOrganizationMemberReq) SetRole(val OptAddOrganizationMemberReqRole) {
	s.Role = val
}

// The role given to the user.
type AddOrganizationMemberReqRole string

const (
	AddOrganizationMemberReqRoleAdmin  AddOrganizationMemberReqRole = "admin"
	AddOrganizationMemberReqRoleMember AddOrganizationMemberReqRole = "member"
	AddOrganizationMemberReqRoleViewer AddOrganizationMemberReqRole = "viewer"
)

// AllValues returns all AddOrganizationMemberReqRole values.
func (AddOrganizationMemberReqRole) AllValues() []AddOrganizationMemberReqRole {
	return []AddOrganizationMemberReqRole{
		AddOrganizationMemberReqRoleAdmin,
		AddOrganizationMemberReqRoleMember,
		AddOrganizationMemberReqRoleViewer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AddOrganizationMemberReqRole) MarshalText() ([]byte, error) {
	switch s {
	case AddOrganizationMemberReqRoleAdmin:
		return []byte(s), nil
	case AddOrganizationMemberReqRoleMember:
		return []byte(s), nil
	case AddOrganizationMemberReqRoleViewer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AddOrganizationMemberReqRole) UnmarshalText(data []byte) error {
	switch AddOrganizationMemberReqRole(data) {
	case AddOrganizationMemberReqRoleAdmin:
		*s = AddOrganizationMemberReqRoleAdmin
		return nil
	case AddOrganizationMemberReqRoleMember:
		*s = AddOrganizationMemberReqRoleMember
		return nil
	case AddOrganizationMemberReqRoleViewer:
		*s = AddOrganizationMemberReqRoleViewer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AuditLog
type AuditLog struct {
	// The code associated to the action taken.
	Code OptAuditLogCode `json:"code"`
	// Additional context from the performed action.
	Message OptString `json:"message"`
	// Where this action was performed. Will be either `cli` or `web` depending on the `User-Agent` sent
	// to the API.
	Origin OptString `json:"origin"`
	// The username of the user who performed the action.
	Author OptString `json:"author"`
	// A formatted [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp this action was performed.
	CreatedAt OptString `json:"created_at"`
	// The payload of the action performed.
	Data *AuditLogData `json:"data"`
}

// GetCode returns the value of Code.
func (s *AuditLog) GetCode() OptAuditLogCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *AuditLog) GetMessage() OptString {
	return s.Message
}

// GetOrigin returns the value of Origin.
func (s *AuditLog) GetOrigin() OptString {
	return s.Origin
}

// GetAuthor returns the value of Author.
func (s *AuditLog) GetAuthor() OptString {
	return s.Author
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AuditLog) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetData returns the value of Data.
func (s *AuditLog) GetData() *AuditLogData {
	return s.Data
}

// SetCode sets the value of Code.
func (s *AuditLog) SetCode(val OptAuditLogCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *AuditLog) SetMessage(val OptString) {
	s.Message = val
}

// SetOrigin sets the value of Origin.
func (s *AuditLog) SetOrigin(val OptString) {
	s.Origin = val
}

// SetAuthor sets the value of Author.
func (s *AuditLog) SetAuthor(val OptString) {
	s.Author = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AuditLog) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetData sets the value of Data.
func (s *AuditLog) SetData(val *AuditLogData) {
	s.Data = val
}

// The code associated to the action taken.
type AuditLogCode string

const (
	AuditLogCodeUserSignup     AuditLogCode = "user-signup"
	AuditLogCodeDbCreate       AuditLogCode = "db-create"
	AuditLogCodeDbDelete       AuditLogCode = "db-delete"
	AuditLogCodeInstanceCreate AuditLogCode = "instance-create"
	AuditLogCodeInstanceDelete AuditLogCode = "instance-delete"
	AuditLogCodeOrgCreate      AuditLogCode = "org-create"
	AuditLogCodeOrgDelete      AuditLogCode = "org-delete"
	AuditLogCodeOrgMemberAdd   AuditLogCode = "org-member-add"
	AuditLogCodeOrgMemberRm    AuditLogCode = "org-member-rm"
	AuditLogCodeOrgMemberLeave AuditLogCode = "org-member-leave"
	AuditLogCodeOrgPlanUpdate  AuditLogCode = "org-plan-update"
	AuditLogCodeOrgSetOverages AuditLogCode = "org-set-overages"
	AuditLogCodeGroupCreate    AuditLogCode = "group-create"
	AuditLogCodeGroupDelete    AuditLogCode = "group-delete"
	AuditLogCodeMfaEnable      AuditLogCode = "mfa-enable"
	AuditLogCodeMfaDisable     AuditLogCode = "mfa-disable"
)

// AllValues returns all AuditLogCode values.
func (AuditLogCode) AllValues() []AuditLogCode {
	return []AuditLogCode{
		AuditLogCodeUserSignup,
		AuditLogCodeDbCreate,
		AuditLogCodeDbDelete,
		AuditLogCodeInstanceCreate,
		AuditLogCodeInstanceDelete,
		AuditLogCodeOrgCreate,
		AuditLogCodeOrgDelete,
		AuditLogCodeOrgMemberAdd,
		AuditLogCodeOrgMemberRm,
		AuditLogCodeOrgMemberLeave,
		AuditLogCodeOrgPlanUpdate,
		AuditLogCodeOrgSetOverages,
		AuditLogCodeGroupCreate,
		AuditLogCodeGroupDelete,
		AuditLogCodeMfaEnable,
		AuditLogCodeMfaDisable,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AuditLogCode) MarshalText() ([]byte, error) {
	switch s {
	case AuditLogCodeUserSignup:
		return []byte(s), nil
	case AuditLogCodeDbCreate:
		return []byte(s), nil
	case AuditLogCodeDbDelete:
		return []byte(s), nil
	case AuditLogCodeInstanceCreate:
		return []byte(s), nil
	case AuditLogCodeInstanceDelete:
		return []byte(s), nil
	case AuditLogCodeOrgCreate:
		return []byte(s), nil
	case AuditLogCodeOrgDelete:
		return []byte(s), nil
	case AuditLogCodeOrgMemberAdd:
		return []byte(s), nil
	case AuditLogCodeOrgMemberRm:
		return []byte(s), nil
	case AuditLogCodeOrgMemberLeave:
		return []byte(s), nil
	case AuditLogCodeOrgPlanUpdate:
		return []byte(s), nil
	case AuditLogCodeOrgSetOverages:
		return []byte(s), nil
	case AuditLogCodeGroupCreate:
		return []byte(s), nil
	case AuditLogCodeGroupDelete:
		return []byte(s), nil
	case AuditLogCodeMfaEnable:
		return []byte(s), nil
	case AuditLogCodeMfaDisable:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AuditLogCode) UnmarshalText(data []byte) error {
	switch AuditLogCode(data) {
	case AuditLogCodeUserSignup:
		*s = AuditLogCodeUserSignup
		return nil
	case AuditLogCodeDbCreate:
		*s = AuditLogCodeDbCreate
		return nil
	case AuditLogCodeDbDelete:
		*s = AuditLogCodeDbDelete
		return nil
	case AuditLogCodeInstanceCreate:
		*s = AuditLogCodeInstanceCreate
		return nil
	case AuditLogCodeInstanceDelete:
		*s = AuditLogCodeInstanceDelete
		return nil
	case AuditLogCodeOrgCreate:
		*s = AuditLogCodeOrgCreate
		return nil
	case AuditLogCodeOrgDelete:
		*s = AuditLogCodeOrgDelete
		return nil
	case AuditLogCodeOrgMemberAdd:
		*s = AuditLogCodeOrgMemberAdd
		return nil
	case AuditLogCodeOrgMemberRm:
		*s = AuditLogCodeOrgMemberRm
		return nil
	case AuditLogCodeOrgMemberLeave:
		*s = AuditLogCodeOrgMemberLeave
		return nil
	case AuditLogCodeOrgPlanUpdate:
		*s = AuditLogCodeOrgPlanUpdate
		return nil
	case AuditLogCodeOrgSetOverages:
		*s = AuditLogCodeOrgSetOverages
		return nil
	case AuditLogCodeGroupCreate:
		*s = AuditLogCodeGroupCreate
		return nil
	case AuditLogCodeGroupDelete:
		*s = AuditLogCodeGroupDelete
		return nil
	case AuditLogCodeMfaEnable:
		*s = AuditLogCodeMfaEnable
		return nil
	case AuditLogCodeMfaDisable:
		*s = AuditLogCodeMfaDisable
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The payload of the action performed.
type AuditLogData struct{}

type CreateAPITokenOK struct {
	// The name given to the API Token.
	Name OptString `json:"name"`
	ID   OptID     `json:"id"`
	// The actual token contents as a JWT. This is used with the `Bearer` header, see
	// [Authentication](/authentication) for more details. **This token is never revealed again.**.
	Token OptString `json:"token"`
}

// GetName returns the value of Name.
func (s *CreateAPITokenOK) GetName() OptString {
	return s.Name
}

// GetID returns the value of ID.
func (s *CreateAPITokenOK) GetID() OptID {
	return s.ID
}

// GetToken returns the value of Token.
func (s *CreateAPITokenOK) GetToken() OptString {
	return s.Token
}

// SetName sets the value of Name.
func (s *CreateAPITokenOK) SetName(val OptString) {
	s.Name = val
}

// SetID sets the value of ID.
func (s *CreateAPITokenOK) SetID(val OptID) {
	s.ID = val
}

// SetToken sets the value of Token.
func (s *CreateAPITokenOK) SetToken(val OptString) {
	s.Token = val
}

type CreateDatabaseBadRequest struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *CreateDatabaseBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreateDatabaseBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*CreateDatabaseBadRequest) createDatabaseRes() {}

type CreateDatabaseConflict struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *CreateDatabaseConflict) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreateDatabaseConflict) SetError(val OptString) {
	s.Error = val
}

func (*CreateDatabaseConflict) createDatabaseRes() {}

// Ref: #/components/schemas/CreateDatabaseInput
type CreateDatabaseInput struct {
	// The name of the new database. Must contain only lowercase letters, numbers, dashes. No longer than
	// 64 characters.
	Name string `json:"name"`
	// The name of the group where the database should be created. **The group must already exist.**.
	Group string                     `json:"group"`
	Seed  OptCreateDatabaseInputSeed `json:"seed"`
	// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb,
	// 1gb.
	SizeLimit OptString `json:"size_limit"`
	// Mark this database as the parent schema database that updates child databases with any schema
	// changes. See [Multi-DB Schemas](/features/multi-db-schemas).
	IsSchema OptBool `json:"is_schema"`
	// The name of the parent database to use as the schema. See [Multi-DB
	// Schemas](/features/multi-db-schemas).
	Schema OptString `json:"schema"`
}

// GetName returns the value of Name.
func (s *CreateDatabaseInput) GetName() string {
	return s.Name
}

// GetGroup returns the value of Group.
func (s *CreateDatabaseInput) GetGroup() string {
	return s.Group
}

// GetSeed returns the value of Seed.
func (s *CreateDatabaseInput) GetSeed() OptCreateDatabaseInputSeed {
	return s.Seed
}

// GetSizeLimit returns the value of SizeLimit.
func (s *CreateDatabaseInput) GetSizeLimit() OptString {
	return s.SizeLimit
}

// GetIsSchema returns the value of IsSchema.
func (s *CreateDatabaseInput) GetIsSchema() OptBool {
	return s.IsSchema
}

// GetSchema returns the value of Schema.
func (s *CreateDatabaseInput) GetSchema() OptString {
	return s.Schema
}

// SetName sets the value of Name.
func (s *CreateDatabaseInput) SetName(val string) {
	s.Name = val
}

// SetGroup sets the value of Group.
func (s *CreateDatabaseInput) SetGroup(val string) {
	s.Group = val
}

// SetSeed sets the value of Seed.
func (s *CreateDatabaseInput) SetSeed(val OptCreateDatabaseInputSeed) {
	s.Seed = val
}

// SetSizeLimit sets the value of SizeLimit.
func (s *CreateDatabaseInput) SetSizeLimit(val OptString) {
	s.SizeLimit = val
}

// SetIsSchema sets the value of IsSchema.
func (s *CreateDatabaseInput) SetIsSchema(val OptBool) {
	s.IsSchema = val
}

// SetSchema sets the value of Schema.
func (s *CreateDatabaseInput) SetSchema(val OptString) {
	s.Schema = val
}

type CreateDatabaseInputSeed struct {
	// The type of seed to be used to create a new database.
	Type OptCreateDatabaseInputSeedType `json:"type"`
	// The name of the existing database when `database` is used as a seed type.
	Name OptString `json:"name"`
	// The URL returned by [upload dump](/api-reference/databases/upload-dump) can be used with the
	// `dump` seed type.
	URL OptString `json:"url"`
	// A formatted [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) recovery point to create a database
	// from. This must be within the last 24 hours, or 30 days on the scaler plan.
	Timestamp OptString `json:"timestamp"`
}

// GetType returns the value of Type.
func (s *CreateDatabaseInputSeed) GetType() OptCreateDatabaseInputSeedType {
	return s.Type
}

// GetName returns the value of Name.
func (s *CreateDatabaseInputSeed) GetName() OptString {
	return s.Name
}

// GetURL returns the value of URL.
func (s *CreateDatabaseInputSeed) GetURL() OptString {
	return s.URL
}

// GetTimestamp returns the value of Timestamp.
func (s *CreateDatabaseInputSeed) GetTimestamp() OptString {
	return s.Timestamp
}

// SetType sets the value of Type.
func (s *CreateDatabaseInputSeed) SetType(val OptCreateDatabaseInputSeedType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *CreateDatabaseInputSeed) SetName(val OptString) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *CreateDatabaseInputSeed) SetURL(val OptString) {
	s.URL = val
}

// SetTimestamp sets the value of Timestamp.
func (s *CreateDatabaseInputSeed) SetTimestamp(val OptString) {
	s.Timestamp = val
}

// The type of seed to be used to create a new database.
type CreateDatabaseInputSeedType string

const (
	CreateDatabaseInputSeedTypeDatabase CreateDatabaseInputSeedType = "database"
	CreateDatabaseInputSeedTypeDump     CreateDatabaseInputSeedType = "dump"
)

// AllValues returns all CreateDatabaseInputSeedType values.
func (CreateDatabaseInputSeedType) AllValues() []CreateDatabaseInputSeedType {
	return []CreateDatabaseInputSeedType{
		CreateDatabaseInputSeedTypeDatabase,
		CreateDatabaseInputSeedTypeDump,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateDatabaseInputSeedType) MarshalText() ([]byte, error) {
	switch s {
	case CreateDatabaseInputSeedTypeDatabase:
		return []byte(s), nil
	case CreateDatabaseInputSeedTypeDump:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateDatabaseInputSeedType) UnmarshalText(data []byte) error {
	switch CreateDatabaseInputSeedType(data) {
	case CreateDatabaseInputSeedTypeDatabase:
		*s = CreateDatabaseInputSeedTypeDatabase
		return nil
	case CreateDatabaseInputSeedTypeDump:
		*s = CreateDatabaseInputSeedTypeDump
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDatabaseOK struct {
	// The newly created database.
	Database OptCreateDatabaseOutput `json:"database"`
}

// GetDatabase returns the value of Database.
func (s *CreateDatabaseOK) GetDatabase() OptCreateDatabaseOutput {
	return s.Database
}

// SetDatabase sets the value of Database.
func (s *CreateDatabaseOK) SetDatabase(val OptCreateDatabaseOutput) {
	s.Database = val
}

func (*CreateDatabaseOK) createDatabaseRes() {}

// Ref: #/components/schemas/CreateDatabaseOutput
type CreateDatabaseOutput struct {
	DbId     OptDbId     `json:"DbId"`
	Hostname OptHostname `json:"Hostname"`
	Name     OptName     `json:"Name"`
}

// GetDbId returns the value of DbId.
func (s *CreateDatabaseOutput) GetDbId() OptDbId {
	return s.DbId
}

// GetHostname returns the value of Hostname.
func (s *CreateDatabaseOutput) GetHostname() OptHostname {
	return s.Hostname
}

// GetName returns the value of Name.
func (s *CreateDatabaseOutput) GetName() OptName {
	return s.Name
}

// SetDbId sets the value of DbId.
func (s *CreateDatabaseOutput) SetDbId(val OptDbId) {
	s.DbId = val
}

// SetHostname sets the value of Hostname.
func (s *CreateDatabaseOutput) SetHostname(val OptHostname) {
	s.Hostname = val
}

// SetName sets the value of Name.
func (s *CreateDatabaseOutput) SetName(val OptName) {
	s.Name = val
}

type CreateDatabaseTokenAuthorization string

const (
	CreateDatabaseTokenAuthorizationFullAccess CreateDatabaseTokenAuthorization = "full-access"
	CreateDatabaseTokenAuthorizationReadOnly   CreateDatabaseTokenAuthorization = "read-only"
)

// AllValues returns all CreateDatabaseTokenAuthorization values.
func (CreateDatabaseTokenAuthorization) AllValues() []CreateDatabaseTokenAuthorization {
	return []CreateDatabaseTokenAuthorization{
		CreateDatabaseTokenAuthorizationFullAccess,
		CreateDatabaseTokenAuthorizationReadOnly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateDatabaseTokenAuthorization) MarshalText() ([]byte, error) {
	switch s {
	case CreateDatabaseTokenAuthorizationFullAccess:
		return []byte(s), nil
	case CreateDatabaseTokenAuthorizationReadOnly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateDatabaseTokenAuthorization) UnmarshalText(data []byte) error {
	switch CreateDatabaseTokenAuthorization(data) {
	case CreateDatabaseTokenAuthorizationFullAccess:
		*s = CreateDatabaseTokenAuthorizationFullAccess
		return nil
	case CreateDatabaseTokenAuthorizationReadOnly:
		*s = CreateDatabaseTokenAuthorizationReadOnly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateDatabaseTokenBadRequest struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *CreateDatabaseTokenBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreateDatabaseTokenBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*CreateDatabaseTokenBadRequest) createDatabaseTokenRes() {}

type CreateDatabaseTokenOK struct {
	// The generated authorization token (JWT).
	Jwt OptString `json:"jwt"`
}

// GetJwt returns the value of Jwt.
func (s *CreateDatabaseTokenOK) GetJwt() OptString {
	return s.Jwt
}

// SetJwt sets the value of Jwt.
func (s *CreateDatabaseTokenOK) SetJwt(val OptString) {
	s.Jwt = val
}

func (*CreateDatabaseTokenOK) createDatabaseTokenRes() {}

type CreateGroupConflict struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *CreateGroupConflict) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreateGroupConflict) SetError(val OptString) {
	s.Error = val
}

func (*CreateGroupConflict) createGroupRes() {}

type CreateGroupOK struct {
	// The newly created group.
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *CreateGroupOK) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *CreateGroupOK) SetGroup(val OptGroup) {
	s.Group = val
}

func (*CreateGroupOK) createGroupRes() {}

type CreateGroupTokenAuthorization string

const (
	CreateGroupTokenAuthorizationFullAccess CreateGroupTokenAuthorization = "full-access"
	CreateGroupTokenAuthorizationReadOnly   CreateGroupTokenAuthorization = "read-only"
)

// AllValues returns all CreateGroupTokenAuthorization values.
func (CreateGroupTokenAuthorization) AllValues() []CreateGroupTokenAuthorization {
	return []CreateGroupTokenAuthorization{
		CreateGroupTokenAuthorizationFullAccess,
		CreateGroupTokenAuthorizationReadOnly,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateGroupTokenAuthorization) MarshalText() ([]byte, error) {
	switch s {
	case CreateGroupTokenAuthorizationFullAccess:
		return []byte(s), nil
	case CreateGroupTokenAuthorizationReadOnly:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateGroupTokenAuthorization) UnmarshalText(data []byte) error {
	switch CreateGroupTokenAuthorization(data) {
	case CreateGroupTokenAuthorizationFullAccess:
		*s = CreateGroupTokenAuthorizationFullAccess
		return nil
	case CreateGroupTokenAuthorizationReadOnly:
		*s = CreateGroupTokenAuthorizationReadOnly
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateGroupTokenBadRequest struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *CreateGroupTokenBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *CreateGroupTokenBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*CreateGroupTokenBadRequest) createGroupTokenRes() {}

type CreateGroupTokenOK struct {
	// The generated authorization token (JWT).
	Jwt OptString `json:"jwt"`
}

// GetJwt returns the value of Jwt.
func (s *CreateGroupTokenOK) GetJwt() OptString {
	return s.Jwt
}

// SetJwt sets the value of Jwt.
func (s *CreateGroupTokenOK) SetJwt(val OptString) {
	s.Jwt = val
}

func (*CreateGroupTokenOK) createGroupTokenRes() {}

// Ref: #/components/schemas/CreateTokenInput
type CreateTokenInput struct {
	// The permissions for the token.
	Permissions OptCreateTokenInputPermissions `json:"permissions"`
}

// GetPermissions returns the value of Permissions.
func (s *CreateTokenInput) GetPermissions() OptCreateTokenInputPermissions {
	return s.Permissions
}

// SetPermissions sets the value of Permissions.
func (s *CreateTokenInput) SetPermissions(val OptCreateTokenInputPermissions) {
	s.Permissions = val
}

// The permissions for the token.
type CreateTokenInputPermissions struct {
	// Read `ATTACH` permission for the token.
	ReadAttach OptCreateTokenInputPermissionsReadAttach `json:"read_attach"`
}

// GetReadAttach returns the value of ReadAttach.
func (s *CreateTokenInputPermissions) GetReadAttach() OptCreateTokenInputPermissionsReadAttach {
	return s.ReadAttach
}

// SetReadAttach sets the value of ReadAttach.
func (s *CreateTokenInputPermissions) SetReadAttach(val OptCreateTokenInputPermissionsReadAttach) {
	s.ReadAttach = val
}

// Read `ATTACH` permission for the token.
type CreateTokenInputPermissionsReadAttach struct {
	Databases []string `json:"databases"`
}

// GetDatabases returns the value of Databases.
func (s *CreateTokenInputPermissionsReadAttach) GetDatabases() []string {
	return s.Databases
}

// SetDatabases sets the value of Databases.
func (s *CreateTokenInputPermissionsReadAttach) SetDatabases(val []string) {
	s.Databases = val
}

// Ref: #/components/schemas/Database
type Database struct {
	// The database name, **unique** across your organization.
	Name OptString `json:"Name"`
	// The database universal unique identifier (UUID).
	DbId OptString `json:"DbId"`
	// The DNS hostname used for client libSQL and HTTP connections.
	Hostname OptString `json:"Hostname"`
	// The current status for blocked reads.
	BlockReads OptBool `json:"block_reads"`
	// The current status for blocked writes.
	BlockWrites OptBool `json:"block_writes"`
	// The current status for allowing the database to be attached to another.
	AllowAttach OptBool `json:"allow_attach"`
	// A list of regions for the group the database belongs to.
	Regions []string `json:"regions"`
	// The primary region location code the group the database belongs to.
	PrimaryRegion OptString `json:"primaryRegion"`
	// The string representing the object type.
	Type OptString `json:"type"`
	// The current libSQL version the database is running.
	Version OptString `json:"version"`
	// The name of the group the database belongs to.
	Group OptString `json:"group"`
	// If this database controls other child databases then this will be `true`. See [Multi-DB
	// Schemas](/features/multi-db-schemas).
	IsSchema OptBool `json:"is_schema"`
	// The name of the parent database that owns the schema for this database. See [Multi-DB
	// Schemas](/features/multi-db-schemas).
	Schema OptNilString `json:"schema"`
	// The current status of the database. If `true`, the database is archived and requires a manual
	// unarchive step.
	Archived OptBool `json:"archived"`
}

// GetName returns the value of Name.
func (s *Database) GetName() OptString {
	return s.Name
}

// GetDbId returns the value of DbId.
func (s *Database) GetDbId() OptString {
	return s.DbId
}

// GetHostname returns the value of Hostname.
func (s *Database) GetHostname() OptString {
	return s.Hostname
}

// GetBlockReads returns the value of BlockReads.
func (s *Database) GetBlockReads() OptBool {
	return s.BlockReads
}

// GetBlockWrites returns the value of BlockWrites.
func (s *Database) GetBlockWrites() OptBool {
	return s.BlockWrites
}

// GetAllowAttach returns the value of AllowAttach.
func (s *Database) GetAllowAttach() OptBool {
	return s.AllowAttach
}

// GetRegions returns the value of Regions.
func (s *Database) GetRegions() []string {
	return s.Regions
}

// GetPrimaryRegion returns the value of PrimaryRegion.
func (s *Database) GetPrimaryRegion() OptString {
	return s.PrimaryRegion
}

// GetType returns the value of Type.
func (s *Database) GetType() OptString {
	return s.Type
}

// GetVersion returns the value of Version.
func (s *Database) GetVersion() OptString {
	return s.Version
}

// GetGroup returns the value of Group.
func (s *Database) GetGroup() OptString {
	return s.Group
}

// GetIsSchema returns the value of IsSchema.
func (s *Database) GetIsSchema() OptBool {
	return s.IsSchema
}

// GetSchema returns the value of Schema.
func (s *Database) GetSchema() OptNilString {
	return s.Schema
}

// GetArchived returns the value of Archived.
func (s *Database) GetArchived() OptBool {
	return s.Archived
}

// SetName sets the value of Name.
func (s *Database) SetName(val OptString) {
	s.Name = val
}

// SetDbId sets the value of DbId.
func (s *Database) SetDbId(val OptString) {
	s.DbId = val
}

// SetHostname sets the value of Hostname.
func (s *Database) SetHostname(val OptString) {
	s.Hostname = val
}

// SetBlockReads sets the value of BlockReads.
func (s *Database) SetBlockReads(val OptBool) {
	s.BlockReads = val
}

// SetBlockWrites sets the value of BlockWrites.
func (s *Database) SetBlockWrites(val OptBool) {
	s.BlockWrites = val
}

// SetAllowAttach sets the value of AllowAttach.
func (s *Database) SetAllowAttach(val OptBool) {
	s.AllowAttach = val
}

// SetRegions sets the value of Regions.
func (s *Database) SetRegions(val []string) {
	s.Regions = val
}

// SetPrimaryRegion sets the value of PrimaryRegion.
func (s *Database) SetPrimaryRegion(val OptString) {
	s.PrimaryRegion = val
}

// SetType sets the value of Type.
func (s *Database) SetType(val OptString) {
	s.Type = val
}

// SetVersion sets the value of Version.
func (s *Database) SetVersion(val OptString) {
	s.Version = val
}

// SetGroup sets the value of Group.
func (s *Database) SetGroup(val OptString) {
	s.Group = val
}

// SetIsSchema sets the value of IsSchema.
func (s *Database) SetIsSchema(val OptBool) {
	s.IsSchema = val
}

// SetSchema sets the value of Schema.
func (s *Database) SetSchema(val OptNilString) {
	s.Schema = val
}

// SetArchived sets the value of Archived.
func (s *Database) SetArchived(val OptBool) {
	s.Archived = val
}

// Ref: #/components/schemas/DatabaseConfigurationInput
type DatabaseConfigurationInput struct {
	// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb,
	// 1gb.
	SizeLimit OptString `json:"size_limit"`
	// Allow or disallow attaching databases to the current database.
	AllowAttach OptBool `json:"allow_attach"`
	// Block all database reads.
	BlockReads OptBool `json:"block_reads"`
	// Block all database writes.
	BlockWrites OptBool `json:"block_writes"`
}

// GetSizeLimit returns the value of SizeLimit.
func (s *DatabaseConfigurationInput) GetSizeLimit() OptString {
	return s.SizeLimit
}

// GetAllowAttach returns the value of AllowAttach.
func (s *DatabaseConfigurationInput) GetAllowAttach() OptBool {
	return s.AllowAttach
}

// GetBlockReads returns the value of BlockReads.
func (s *DatabaseConfigurationInput) GetBlockReads() OptBool {
	return s.BlockReads
}

// GetBlockWrites returns the value of BlockWrites.
func (s *DatabaseConfigurationInput) GetBlockWrites() OptBool {
	return s.BlockWrites
}

// SetSizeLimit sets the value of SizeLimit.
func (s *DatabaseConfigurationInput) SetSizeLimit(val OptString) {
	s.SizeLimit = val
}

// SetAllowAttach sets the value of AllowAttach.
func (s *DatabaseConfigurationInput) SetAllowAttach(val OptBool) {
	s.AllowAttach = val
}

// SetBlockReads sets the value of BlockReads.
func (s *DatabaseConfigurationInput) SetBlockReads(val OptBool) {
	s.BlockReads = val
}

// SetBlockWrites sets the value of BlockWrites.
func (s *DatabaseConfigurationInput) SetBlockWrites(val OptBool) {
	s.BlockWrites = val
}

// Ref: #/components/schemas/DatabaseConfigurationResponse
type DatabaseConfigurationResponse struct {
	// The maximum size of the database in bytes. Values with units are also accepted, e.g. 1mb, 256mb,
	// 1gb.
	SizeLimit OptString `json:"size_limit"`
	// Allow or disallow attaching databases to the current database.
	AllowAttach OptBool `json:"allow_attach"`
	// The current status for blocked reads.
	BlockReads OptBool `json:"block_reads"`
	// The current status for blocked writes.
	BlockWrites OptBool `json:"block_writes"`
}

// GetSizeLimit returns the value of SizeLimit.
func (s *DatabaseConfigurationResponse) GetSizeLimit() OptString {
	return s.SizeLimit
}

// GetAllowAttach returns the value of AllowAttach.
func (s *DatabaseConfigurationResponse) GetAllowAttach() OptBool {
	return s.AllowAttach
}

// GetBlockReads returns the value of BlockReads.
func (s *DatabaseConfigurationResponse) GetBlockReads() OptBool {
	return s.BlockReads
}

// GetBlockWrites returns the value of BlockWrites.
func (s *DatabaseConfigurationResponse) GetBlockWrites() OptBool {
	return s.BlockWrites
}

// SetSizeLimit sets the value of SizeLimit.
func (s *DatabaseConfigurationResponse) SetSizeLimit(val OptString) {
	s.SizeLimit = val
}

// SetAllowAttach sets the value of AllowAttach.
func (s *DatabaseConfigurationResponse) SetAllowAttach(val OptBool) {
	s.AllowAttach = val
}

// SetBlockReads sets the value of BlockReads.
func (s *DatabaseConfigurationResponse) SetBlockReads(val OptBool) {
	s.BlockReads = val
}

// SetBlockWrites sets the value of BlockWrites.
func (s *DatabaseConfigurationResponse) SetBlockWrites(val OptBool) {
	s.BlockWrites = val
}

type DatabaseNotFoundResponse struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *DatabaseNotFoundResponse) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *DatabaseNotFoundResponse) SetError(val OptString) {
	s.Error = val
}

func (*DatabaseNotFoundResponse) createDatabaseTokenRes()      {}
func (*DatabaseNotFoundResponse) deleteDatabaseRes()           {}
func (*DatabaseNotFoundResponse) getDatabaseRes()              {}
func (*DatabaseNotFoundResponse) getDatabaseStatsRes()         {}
func (*DatabaseNotFoundResponse) getDatabaseUsageRes()         {}
func (*DatabaseNotFoundResponse) invalidateDatabaseTokensRes() {}

// Ref: #/components/schemas/DatabaseStatsOutput
type DatabaseStatsOutput struct {
	// A string representing the SQL query executed.
	Query OptString `json:"query"`
	// An integer indicating the number of rows read by the query, which reflects the volume of data the
	// query processed from the database.
	RowsRead OptInt `json:"rows_read"`
	// An integer indicating the number of rows written (inserted, updated, or deleted) by the query,
	// which reflects the impact of the query on the database data.
	RowsWritten OptInt `json:"rows_written"`
}

// GetQuery returns the value of Query.
func (s *DatabaseStatsOutput) GetQuery() OptString {
	return s.Query
}

// GetRowsRead returns the value of RowsRead.
func (s *DatabaseStatsOutput) GetRowsRead() OptInt {
	return s.RowsRead
}

// GetRowsWritten returns the value of RowsWritten.
func (s *DatabaseStatsOutput) GetRowsWritten() OptInt {
	return s.RowsWritten
}

// SetQuery sets the value of Query.
func (s *DatabaseStatsOutput) SetQuery(val OptString) {
	s.Query = val
}

// SetRowsRead sets the value of RowsRead.
func (s *DatabaseStatsOutput) SetRowsRead(val OptInt) {
	s.RowsRead = val
}

// SetRowsWritten sets the value of RowsWritten.
func (s *DatabaseStatsOutput) SetRowsWritten(val OptInt) {
	s.RowsWritten = val
}

// Ref: #/components/schemas/DatabaseUsageObject
type DatabaseUsageObject struct {
	// The total rows read in the time period.
	RowsRead OptInt `json:"rows_read"`
	// The total rows written in the time period.
	RowsWritten OptInt `json:"rows_written"`
	// The total storage used.
	StorageBytes OptInt `json:"storage_bytes"`
	// The total bytes synced.
	BytesSynced OptInt `json:"bytes_synced"`
}

// GetRowsRead returns the value of RowsRead.
func (s *DatabaseUsageObject) GetRowsRead() OptInt {
	return s.RowsRead
}

// GetRowsWritten returns the value of RowsWritten.
func (s *DatabaseUsageObject) GetRowsWritten() OptInt {
	return s.RowsWritten
}

// GetStorageBytes returns the value of StorageBytes.
func (s *DatabaseUsageObject) GetStorageBytes() OptInt {
	return s.StorageBytes
}

// GetBytesSynced returns the value of BytesSynced.
func (s *DatabaseUsageObject) GetBytesSynced() OptInt {
	return s.BytesSynced
}

// SetRowsRead sets the value of RowsRead.
func (s *DatabaseUsageObject) SetRowsRead(val OptInt) {
	s.RowsRead = val
}

// SetRowsWritten sets the value of RowsWritten.
func (s *DatabaseUsageObject) SetRowsWritten(val OptInt) {
	s.RowsWritten = val
}

// SetStorageBytes sets the value of StorageBytes.
func (s *DatabaseUsageObject) SetStorageBytes(val OptInt) {
	s.StorageBytes = val
}

// SetBytesSynced sets the value of BytesSynced.
func (s *DatabaseUsageObject) SetBytesSynced(val OptInt) {
	s.BytesSynced = val
}

// Ref: #/components/schemas/DatabaseUsageOutput
type DatabaseUsageOutput struct {
	UUID OptDbId `json:"uuid"`
	// The usage objects for instances of the current database.
	Instances []DatabaseUsageOutputInstancesItem `json:"instances"`
	// The total usage for the database.
	Total OptDatabaseUsageObject `json:"total"`
}

// GetUUID returns the value of UUID.
func (s *DatabaseUsageOutput) GetUUID() OptDbId {
	return s.UUID
}

// GetInstances returns the value of Instances.
func (s *DatabaseUsageOutput) GetInstances() []DatabaseUsageOutputInstancesItem {
	return s.Instances
}

// GetTotal returns the value of Total.
func (s *DatabaseUsageOutput) GetTotal() OptDatabaseUsageObject {
	return s.Total
}

// SetUUID sets the value of UUID.
func (s *DatabaseUsageOutput) SetUUID(val OptDbId) {
	s.UUID = val
}

// SetInstances sets the value of Instances.
func (s *DatabaseUsageOutput) SetInstances(val []DatabaseUsageOutputInstancesItem) {
	s.Instances = val
}

// SetTotal sets the value of Total.
func (s *DatabaseUsageOutput) SetTotal(val OptDatabaseUsageObject) {
	s.Total = val
}

type DatabaseUsageOutputInstancesItem struct {
	// The instance universal unique identifier (UUID).
	UUID OptString `json:"uuid"`
	// The usage for the current database instance.
	Usage OptDatabaseUsageObject `json:"usage"`
}

// GetUUID returns the value of UUID.
func (s *DatabaseUsageOutputInstancesItem) GetUUID() OptString {
	return s.UUID
}

// GetUsage returns the value of Usage.
func (s *DatabaseUsageOutputInstancesItem) GetUsage() OptDatabaseUsageObject {
	return s.Usage
}

// SetUUID sets the value of UUID.
func (s *DatabaseUsageOutputInstancesItem) SetUUID(val OptString) {
	s.UUID = val
}

// SetUsage sets the value of Usage.
func (s *DatabaseUsageOutputInstancesItem) SetUsage(val OptDatabaseUsageObject) {
	s.Usage = val
}

type DbId string

type DeleteDatabaseOK struct {
	// The name of the database that was deleted.
	Database OptString `json:"database"`
}

// GetDatabase returns the value of Database.
func (s *DeleteDatabaseOK) GetDatabase() OptString {
	return s.Database
}

// SetDatabase sets the value of Database.
func (s *DeleteDatabaseOK) SetDatabase(val OptString) {
	s.Database = val
}

func (*DeleteDatabaseOK) deleteDatabaseRes() {}

type DeleteGroupOK struct {
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *DeleteGroupOK) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *DeleteGroupOK) SetGroup(val OptGroup) {
	s.Group = val
}

func (*DeleteGroupOK) deleteGroupRes() {}

type DeleteOrganizationInviteByEmailNotFound struct {
	// The error code.
	Code OptString `json:"code"`
	// The error message (human readable).
	Error OptString `json:"error"`
}

// GetCode returns the value of Code.
func (s *DeleteOrganizationInviteByEmailNotFound) GetCode() OptString {
	return s.Code
}

// GetError returns the value of Error.
func (s *DeleteOrganizationInviteByEmailNotFound) GetError() OptString {
	return s.Error
}

// SetCode sets the value of Code.
func (s *DeleteOrganizationInviteByEmailNotFound) SetCode(val OptString) {
	s.Code = val
}

// SetError sets the value of Error.
func (s *DeleteOrganizationInviteByEmailNotFound) SetError(val OptString) {
	s.Error = val
}

func (*DeleteOrganizationInviteByEmailNotFound) deleteOrganizationInviteByEmailRes() {}

// DeleteOrganizationInviteByEmailOK is response for DeleteOrganizationInviteByEmail operation.
type DeleteOrganizationInviteByEmailOK struct{}

func (*DeleteOrganizationInviteByEmailOK) deleteOrganizationInviteByEmailRes() {}

// The extensions to enable for new databases created in this group. Users looking to enable vector
// extensions should instead use the native [libSQL vector datatype](/features/ai-and-embeddings).
// Ref: #/components/schemas/Extensions
// Extensions represents sum type.
type Extensions struct {
	Type                 ExtensionsType // switch on this field
	Extensions0          Extensions0
	Extensions1ItemArray []Extensions1Item
}

// ExtensionsType is oneOf type of Extensions.
type ExtensionsType string

// Possible values for ExtensionsType.
const (
	Extensions0Extensions          ExtensionsType = "Extensions0"
	Extensions1ItemArrayExtensions ExtensionsType = "[]Extensions1Item"
)

// IsExtensions0 reports whether Extensions is Extensions0.
func (s Extensions) IsExtensions0() bool { return s.Type == Extensions0Extensions }

// IsExtensions1ItemArray reports whether Extensions is []Extensions1Item.
func (s Extensions) IsExtensions1ItemArray() bool { return s.Type == Extensions1ItemArrayExtensions }

// SetExtensions0 sets Extensions to Extensions0.
func (s *Extensions) SetExtensions0(v Extensions0) {
	s.Type = Extensions0Extensions
	s.Extensions0 = v
}

// GetExtensions0 returns Extensions0 and true boolean if Extensions is Extensions0.
func (s Extensions) GetExtensions0() (v Extensions0, ok bool) {
	if !s.IsExtensions0() {
		return v, false
	}
	return s.Extensions0, true
}

// NewExtensions0Extensions returns new Extensions from Extensions0.
func NewExtensions0Extensions(v Extensions0) Extensions {
	var s Extensions
	s.SetExtensions0(v)
	return s
}

// SetExtensions1ItemArray sets Extensions to []Extensions1Item.
func (s *Extensions) SetExtensions1ItemArray(v []Extensions1Item) {
	s.Type = Extensions1ItemArrayExtensions
	s.Extensions1ItemArray = v
}

// GetExtensions1ItemArray returns []Extensions1Item and true boolean if Extensions is []Extensions1Item.
func (s Extensions) GetExtensions1ItemArray() (v []Extensions1Item, ok bool) {
	if !s.IsExtensions1ItemArray() {
		return v, false
	}
	return s.Extensions1ItemArray, true
}

// NewExtensions1ItemArrayExtensions returns new Extensions from []Extensions1Item.
func NewExtensions1ItemArrayExtensions(v []Extensions1Item) Extensions {
	var s Extensions
	s.SetExtensions1ItemArray(v)
	return s
}

// Set to `all` to enable all extensions.
type Extensions0 string

const (
	Extensions0All Extensions0 = "all"
)

// AllValues returns all Extensions0 values.
func (Extensions0) AllValues() []Extensions0 {
	return []Extensions0{
		Extensions0All,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Extensions0) MarshalText() ([]byte, error) {
	switch s {
	case Extensions0All:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Extensions0) UnmarshalText(data []byte) error {
	switch Extensions0(data) {
	case Extensions0All:
		*s = Extensions0All
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Extensions1Item string

const (
	Extensions1ItemVector  Extensions1Item = "vector"
	Extensions1ItemCrypto  Extensions1Item = "crypto"
	Extensions1ItemFuzzy   Extensions1Item = "fuzzy"
	Extensions1ItemMath    Extensions1Item = "math"
	Extensions1ItemStats   Extensions1Item = "stats"
	Extensions1ItemText    Extensions1Item = "text"
	Extensions1ItemUnicode Extensions1Item = "unicode"
	Extensions1ItemUUID    Extensions1Item = "uuid"
	Extensions1ItemRegexp  Extensions1Item = "regexp"
	Extensions1ItemVec     Extensions1Item = "vec"
)

// AllValues returns all Extensions1Item values.
func (Extensions1Item) AllValues() []Extensions1Item {
	return []Extensions1Item{
		Extensions1ItemVector,
		Extensions1ItemCrypto,
		Extensions1ItemFuzzy,
		Extensions1ItemMath,
		Extensions1ItemStats,
		Extensions1ItemText,
		Extensions1ItemUnicode,
		Extensions1ItemUUID,
		Extensions1ItemRegexp,
		Extensions1ItemVec,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Extensions1Item) MarshalText() ([]byte, error) {
	switch s {
	case Extensions1ItemVector:
		return []byte(s), nil
	case Extensions1ItemCrypto:
		return []byte(s), nil
	case Extensions1ItemFuzzy:
		return []byte(s), nil
	case Extensions1ItemMath:
		return []byte(s), nil
	case Extensions1ItemStats:
		return []byte(s), nil
	case Extensions1ItemText:
		return []byte(s), nil
	case Extensions1ItemUnicode:
		return []byte(s), nil
	case Extensions1ItemUUID:
		return []byte(s), nil
	case Extensions1ItemRegexp:
		return []byte(s), nil
	case Extensions1ItemVec:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Extensions1Item) UnmarshalText(data []byte) error {
	switch Extensions1Item(data) {
	case Extensions1ItemVector:
		*s = Extensions1ItemVector
		return nil
	case Extensions1ItemCrypto:
		*s = Extensions1ItemCrypto
		return nil
	case Extensions1ItemFuzzy:
		*s = Extensions1ItemFuzzy
		return nil
	case Extensions1ItemMath:
		*s = Extensions1ItemMath
		return nil
	case Extensions1ItemStats:
		*s = Extensions1ItemStats
		return nil
	case Extensions1ItemText:
		*s = Extensions1ItemText
		return nil
	case Extensions1ItemUnicode:
		*s = Extensions1ItemUnicode
		return nil
	case Extensions1ItemUUID:
		*s = Extensions1ItemUUID
		return nil
	case Extensions1ItemRegexp:
		*s = Extensions1ItemRegexp
		return nil
	case Extensions1ItemVec:
		*s = Extensions1ItemVec
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetDatabaseInstanceOK struct {
	Instance OptInstance `json:"instance"`
}

// GetInstance returns the value of Instance.
func (s *GetDatabaseInstanceOK) GetInstance() OptInstance {
	return s.Instance
}

// SetInstance sets the value of Instance.
func (s *GetDatabaseInstanceOK) SetInstance(val OptInstance) {
	s.Instance = val
}

type GetDatabaseOK struct {
	Database OptDatabase `json:"database"`
}

// GetDatabase returns the value of Database.
func (s *GetDatabaseOK) GetDatabase() OptDatabase {
	return s.Database
}

// SetDatabase sets the value of Database.
func (s *GetDatabaseOK) SetDatabase(val OptDatabase) {
	s.Database = val
}

func (*GetDatabaseOK) getDatabaseRes() {}

type GetDatabaseStatsOK struct {
	// The top queries performed on the given database as well as the total rows read and written.
	TopQueries OptNilDatabaseStatsOutputArray `json:"top_queries"`
}

// GetTopQueries returns the value of TopQueries.
func (s *GetDatabaseStatsOK) GetTopQueries() OptNilDatabaseStatsOutputArray {
	return s.TopQueries
}

// SetTopQueries sets the value of TopQueries.
func (s *GetDatabaseStatsOK) SetTopQueries(val OptNilDatabaseStatsOutputArray) {
	s.TopQueries = val
}

func (*GetDatabaseStatsOK) getDatabaseStatsRes() {}

type GetDatabaseUsageBadRequest struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *GetDatabaseUsageBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *GetDatabaseUsageBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*GetDatabaseUsageBadRequest) getDatabaseUsageRes() {}

type GetDatabaseUsageOK struct {
	// The database usage object, containg the total and individual instance usage for rows read and
	// written, as well as the total storage size (in bytes).
	Database OptDatabaseUsageOutput `json:"database"`
}

// GetDatabase returns the value of Database.
func (s *GetDatabaseUsageOK) GetDatabase() OptDatabaseUsageOutput {
	return s.Database
}

// SetDatabase sets the value of Database.
func (s *GetDatabaseUsageOK) SetDatabase(val OptDatabaseUsageOutput) {
	s.Database = val
}

func (*GetDatabaseUsageOK) getDatabaseUsageRes() {}

type GetGroupOK struct {
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *GetGroupOK) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *GetGroupOK) SetGroup(val OptGroup) {
	s.Group = val
}

func (*GetGroupOK) getGroupRes() {}

type GetOrganizationMemberNotFound struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *GetOrganizationMemberNotFound) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *GetOrganizationMemberNotFound) SetError(val OptString) {
	s.Error = val
}

func (*GetOrganizationMemberNotFound) getOrganizationMemberRes() {}

type GetOrganizationMemberOK struct {
	Member OptMember `json:"member"`
}

// GetMember returns the value of Member.
func (s *GetOrganizationMemberOK) GetMember() OptMember {
	return s.Member
}

// SetMember sets the value of Member.
func (s *GetOrganizationMemberOK) SetMember(val OptMember) {
	s.Member = val
}

func (*GetOrganizationMemberOK) getOrganizationMemberRes() {}

type GetOrganizationNotFound struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *GetOrganizationNotFound) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *GetOrganizationNotFound) SetError(val OptString) {
	s.Error = val
}

func (*GetOrganizationNotFound) getOrganizationRes() {}

type GetOrganizationOK struct {
	Organization OptOrganization `json:"organization"`
}

// GetOrganization returns the value of Organization.
func (s *GetOrganizationOK) GetOrganization() OptOrganization {
	return s.Organization
}

// SetOrganization sets the value of Organization.
func (s *GetOrganizationOK) SetOrganization(val OptOrganization) {
	s.Organization = val
}

func (*GetOrganizationOK) getOrganizationRes() {}

type GetOrganizationSubscriptionOK struct {
	Subscription OptGetOrganizationSubscriptionOKSubscription `json:"subscription"`
}

// GetSubscription returns the value of Subscription.
func (s *GetOrganizationSubscriptionOK) GetSubscription() OptGetOrganizationSubscriptionOKSubscription {
	return s.Subscription
}

// SetSubscription sets the value of Subscription.
func (s *GetOrganizationSubscriptionOK) SetSubscription(val OptGetOrganizationSubscriptionOKSubscription) {
	s.Subscription = val
}

type GetOrganizationSubscriptionOKSubscription struct {
	// The name of the plan for the current subscription.
	Name OptString `json:"name"`
	// Whether overages are enabled for the organization.
	Overages OptBool `json:"overages"`
	// The name of the plan for the current subscription.
	Plan OptString `json:"plan"`
	// Whether the plan is billed monthly or yearly.
	Timeline OptString `json:"timeline"`
}

// GetName returns the value of Name.
func (s *GetOrganizationSubscriptionOKSubscription) GetName() OptString {
	return s.Name
}

// GetOverages returns the value of Overages.
func (s *GetOrganizationSubscriptionOKSubscription) GetOverages() OptBool {
	return s.Overages
}

// GetPlan returns the value of Plan.
func (s *GetOrganizationSubscriptionOKSubscription) GetPlan() OptString {
	return s.Plan
}

// GetTimeline returns the value of Timeline.
func (s *GetOrganizationSubscriptionOKSubscription) GetTimeline() OptString {
	return s.Timeline
}

// SetName sets the value of Name.
func (s *GetOrganizationSubscriptionOKSubscription) SetName(val OptString) {
	s.Name = val
}

// SetOverages sets the value of Overages.
func (s *GetOrganizationSubscriptionOKSubscription) SetOverages(val OptBool) {
	s.Overages = val
}

// SetPlan sets the value of Plan.
func (s *GetOrganizationSubscriptionOKSubscription) SetPlan(val OptString) {
	s.Plan = val
}

// SetTimeline sets the value of Timeline.
func (s *GetOrganizationSubscriptionOKSubscription) SetTimeline(val OptString) {
	s.Timeline = val
}

type GetOrganizationUsageOK struct {
	// The organization usage object, containing the total usage for rows read and written, as well as
	// the total storage size (in bytes).
	Organization OptGetOrganizationUsageOKOrganization `json:"organization"`
}

// GetOrganization returns the value of Organization.
func (s *GetOrganizationUsageOK) GetOrganization() OptGetOrganizationUsageOKOrganization {
	return s.Organization
}

// SetOrganization sets the value of Organization.
func (s *GetOrganizationUsageOK) SetOrganization(val OptGetOrganizationUsageOKOrganization) {
	s.Organization = val
}

// The organization usage object, containing the total usage for rows read and written, as well as
// the total storage size (in bytes).
type GetOrganizationUsageOKOrganization struct {
	// The UUID of the organization.
	UUID OptString `json:"uuid"`
	// The usage object for the organization.
	Usage OptGetOrganizationUsageOKOrganizationUsage `json:"usage"`
	// The databases for the organization and their usage.
	Databases []DatabaseUsageOutput `json:"databases"`
}

// GetUUID returns the value of UUID.
func (s *GetOrganizationUsageOKOrganization) GetUUID() OptString {
	return s.UUID
}

// GetUsage returns the value of Usage.
func (s *GetOrganizationUsageOKOrganization) GetUsage() OptGetOrganizationUsageOKOrganizationUsage {
	return s.Usage
}

// GetDatabases returns the value of Databases.
func (s *GetOrganizationUsageOKOrganization) GetDatabases() []DatabaseUsageOutput {
	return s.Databases
}

// SetUUID sets the value of UUID.
func (s *GetOrganizationUsageOKOrganization) SetUUID(val OptString) {
	s.UUID = val
}

// SetUsage sets the value of Usage.
func (s *GetOrganizationUsageOKOrganization) SetUsage(val OptGetOrganizationUsageOKOrganizationUsage) {
	s.Usage = val
}

// SetDatabases sets the value of Databases.
func (s *GetOrganizationUsageOKOrganization) SetDatabases(val []DatabaseUsageOutput) {
	s.Databases = val
}

// The usage object for the organization.
type GetOrganizationUsageOKOrganizationUsage struct {
	// The number of rows read allowed for the specific plan.
	RowsRead OptInt `json:"rows_read"`
	// The number of rows written allowed for the specific plan.
	RowsWritten OptInt `json:"rows_written"`
	// The number of databases allowed for the specific plan.
	Databases OptInt `json:"databases"`
	// The number of locations allowed for the specific plan.
	Locations OptInt `json:"locations"`
	// The amount of storage allowed for the specific plan, in bytes.
	StorageBytes OptInt `json:"storage_bytes"`
	// The number of groups allowed for the specific plan.
	Groups OptInt `json:"groups"`
	// The number of bytes synced allowed for the specific plan, in bytes.
	BytesSynced OptInt `json:"bytes_synced"`
}

// GetRowsRead returns the value of RowsRead.
func (s *GetOrganizationUsageOKOrganizationUsage) GetRowsRead() OptInt {
	return s.RowsRead
}

// GetRowsWritten returns the value of RowsWritten.
func (s *GetOrganizationUsageOKOrganizationUsage) GetRowsWritten() OptInt {
	return s.RowsWritten
}

// GetDatabases returns the value of Databases.
func (s *GetOrganizationUsageOKOrganizationUsage) GetDatabases() OptInt {
	return s.Databases
}

// GetLocations returns the value of Locations.
func (s *GetOrganizationUsageOKOrganizationUsage) GetLocations() OptInt {
	return s.Locations
}

// GetStorageBytes returns the value of StorageBytes.
func (s *GetOrganizationUsageOKOrganizationUsage) GetStorageBytes() OptInt {
	return s.StorageBytes
}

// GetGroups returns the value of Groups.
func (s *GetOrganizationUsageOKOrganizationUsage) GetGroups() OptInt {
	return s.Groups
}

// GetBytesSynced returns the value of BytesSynced.
func (s *GetOrganizationUsageOKOrganizationUsage) GetBytesSynced() OptInt {
	return s.BytesSynced
}

// SetRowsRead sets the value of RowsRead.
func (s *GetOrganizationUsageOKOrganizationUsage) SetRowsRead(val OptInt) {
	s.RowsRead = val
}

// SetRowsWritten sets the value of RowsWritten.
func (s *GetOrganizationUsageOKOrganizationUsage) SetRowsWritten(val OptInt) {
	s.RowsWritten = val
}

// SetDatabases sets the value of Databases.
func (s *GetOrganizationUsageOKOrganizationUsage) SetDatabases(val OptInt) {
	s.Databases = val
}

// SetLocations sets the value of Locations.
func (s *GetOrganizationUsageOKOrganizationUsage) SetLocations(val OptInt) {
	s.Locations = val
}

// SetStorageBytes sets the value of StorageBytes.
func (s *GetOrganizationUsageOKOrganizationUsage) SetStorageBytes(val OptInt) {
	s.StorageBytes = val
}

// SetGroups sets the value of Groups.
func (s *GetOrganizationUsageOKOrganizationUsage) SetGroups(val OptInt) {
	s.Groups = val
}

// SetBytesSynced sets the value of BytesSynced.
func (s *GetOrganizationUsageOKOrganizationUsage) SetBytesSynced(val OptInt) {
	s.BytesSynced = val
}

// Merged schema.
// Ref: #/components/schemas/Group
type Group struct {
	// The group name, unique across your organization.
	Name OptString `json:"name"`
	// The current libSQL server version the databases in that group are running.
	Version OptString `json:"version"`
	// The group universal unique identifier (UUID).
	UUID OptString `json:"uuid"`
	// An array of location keys the group is located.
	Locations []string `json:"locations"`
	// The primary location key.
	Primary OptString `json:"primary"`
	// Groups on the free tier get archived after some inactivity.
	Archived OptBool `json:"archived"`
}

// GetName returns the value of Name.
func (s *Group) GetName() OptString {
	return s.Name
}

// GetVersion returns the value of Version.
func (s *Group) GetVersion() OptString {
	return s.Version
}

// GetUUID returns the value of UUID.
func (s *Group) GetUUID() OptString {
	return s.UUID
}

// GetLocations returns the value of Locations.
func (s *Group) GetLocations() []string {
	return s.Locations
}

// GetPrimary returns the value of Primary.
func (s *Group) GetPrimary() OptString {
	return s.Primary
}

// GetArchived returns the value of Archived.
func (s *Group) GetArchived() OptBool {
	return s.Archived
}

// SetName sets the value of Name.
func (s *Group) SetName(val OptString) {
	s.Name = val
}

// SetVersion sets the value of Version.
func (s *Group) SetVersion(val OptString) {
	s.Version = val
}

// SetUUID sets the value of UUID.
func (s *Group) SetUUID(val OptString) {
	s.UUID = val
}

// SetLocations sets the value of Locations.
func (s *Group) SetLocations(val []string) {
	s.Locations = val
}

// SetPrimary sets the value of Primary.
func (s *Group) SetPrimary(val OptString) {
	s.Primary = val
}

// SetArchived sets the value of Archived.
func (s *Group) SetArchived(val OptBool) {
	s.Archived = val
}

func (*Group) transferGroupRes() {}

type GroupNotFoundResponse struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *GroupNotFoundResponse) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *GroupNotFoundResponse) SetError(val OptString) {
	s.Error = val
}

func (*GroupNotFoundResponse) addLocationToGroupRes()      {}
func (*GroupNotFoundResponse) createGroupTokenRes()        {}
func (*GroupNotFoundResponse) deleteGroupRes()             {}
func (*GroupNotFoundResponse) getGroupRes()                {}
func (*GroupNotFoundResponse) invalidateGroupTokensRes()   {}
func (*GroupNotFoundResponse) removeLocationFromGroupRes() {}
func (*GroupNotFoundResponse) transferGroupRes()           {}
func (*GroupNotFoundResponse) unarchiveGroupRes()          {}
func (*GroupNotFoundResponse) updateGroupDatabasesRes()    {}

type Hostname string

type ID string

// Ref: #/components/schemas/Instance
type Instance struct {
	// The instance universal unique identifier (UUID).
	UUID OptString `json:"uuid"`
	// The name of the instance (location code).
	Name OptString `json:"name"`
	// The type of database instance this, will be `primary` or `replica`.
	Type OptInstanceType `json:"type"`
	// The location code for the region this instance is located.
	Region OptString `json:"region"`
	// The DNS hostname used for client libSQL and HTTP connections (specific to this instance only).
	Hostname OptString `json:"hostname"`
}

// GetUUID returns the value of UUID.
func (s *Instance) GetUUID() OptString {
	return s.UUID
}

// GetName returns the value of Name.
func (s *Instance) GetName() OptString {
	return s.Name
}

// GetType returns the value of Type.
func (s *Instance) GetType() OptInstanceType {
	return s.Type
}

// GetRegion returns the value of Region.
func (s *Instance) GetRegion() OptString {
	return s.Region
}

// GetHostname returns the value of Hostname.
func (s *Instance) GetHostname() OptString {
	return s.Hostname
}

// SetUUID sets the value of UUID.
func (s *Instance) SetUUID(val OptString) {
	s.UUID = val
}

// SetName sets the value of Name.
func (s *Instance) SetName(val OptString) {
	s.Name = val
}

// SetType sets the value of Type.
func (s *Instance) SetType(val OptInstanceType) {
	s.Type = val
}

// SetRegion sets the value of Region.
func (s *Instance) SetRegion(val OptString) {
	s.Region = val
}

// SetHostname sets the value of Hostname.
func (s *Instance) SetHostname(val OptString) {
	s.Hostname = val
}

// The type of database instance this, will be `primary` or `replica`.
type InstanceType string

const (
	InstanceTypePrimary InstanceType = "primary"
	InstanceTypeReplica InstanceType = "replica"
)

// AllValues returns all InstanceType values.
func (InstanceType) AllValues() []InstanceType {
	return []InstanceType{
		InstanceTypePrimary,
		InstanceTypeReplica,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InstanceType) MarshalText() ([]byte, error) {
	switch s {
	case InstanceTypePrimary:
		return []byte(s), nil
	case InstanceTypeReplica:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InstanceType) UnmarshalText(data []byte) error {
	switch InstanceType(data) {
	case InstanceTypePrimary:
		*s = InstanceTypePrimary
		return nil
	case InstanceTypeReplica:
		*s = InstanceTypeReplica
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// InvalidateDatabaseTokensOK is response for InvalidateDatabaseTokens operation.
type InvalidateDatabaseTokensOK struct{}

func (*InvalidateDatabaseTokensOK) invalidateDatabaseTokensRes() {}

// InvalidateGroupTokensOK is response for InvalidateGroupTokens operation.
type InvalidateGroupTokensOK struct{}

func (*InvalidateGroupTokensOK) invalidateGroupTokensRes() {}

// Ref: #/components/schemas/Invite
type Invite struct {
	// The unique ID for the invite.
	ID OptInt `json:"ID"`
	// The datetime the invite was created in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	// Example: `2023-01-01T00:00:00Z`.
	CreatedAt OptString `json:"CreatedAt"`
	// The datetime the invite was updated in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	// Example: `2023-01-01T00:00:00Z`.
	UpdatedAt OptString `json:"UpdatedAt"`
	// The datetime the invite was deleted (or revoked) in [ISO 8601](https://en.wikipedia.
	// org/wiki/ISO_8601) format. Example: `2023-01-01T00:00:00Z`.
	DeletedAt OptString `json:"DeletedAt"`
	// The assigned role for the invited user.
	Role OptInviteRole `json:"Role"`
	// The email of the person invited.
	Email OptString `json:"Email"`
	// The ID of the organization the user was invited to.
	OrganizationID OptInt `json:"OrganizationID"`
	// The unique token used to verify the invite.
	Token        OptString       `json:"Token"`
	Organization OptOrganization `json:"Organization"`
	// The current status of the invite.
	Accepted OptBool `json:"Accepted"`
}

// GetID returns the value of ID.
func (s *Invite) GetID() OptInt {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Invite) GetCreatedAt() OptString {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Invite) GetUpdatedAt() OptString {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *Invite) GetDeletedAt() OptString {
	return s.DeletedAt
}

// GetRole returns the value of Role.
func (s *Invite) GetRole() OptInviteRole {
	return s.Role
}

// GetEmail returns the value of Email.
func (s *Invite) GetEmail() OptString {
	return s.Email
}

// GetOrganizationID returns the value of OrganizationID.
func (s *Invite) GetOrganizationID() OptInt {
	return s.OrganizationID
}

// GetToken returns the value of Token.
func (s *Invite) GetToken() OptString {
	return s.Token
}

// GetOrganization returns the value of Organization.
func (s *Invite) GetOrganization() OptOrganization {
	return s.Organization
}

// GetAccepted returns the value of Accepted.
func (s *Invite) GetAccepted() OptBool {
	return s.Accepted
}

// SetID sets the value of ID.
func (s *Invite) SetID(val OptInt) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Invite) SetCreatedAt(val OptString) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Invite) SetUpdatedAt(val OptString) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *Invite) SetDeletedAt(val OptString) {
	s.DeletedAt = val
}

// SetRole sets the value of Role.
func (s *Invite) SetRole(val OptInviteRole) {
	s.Role = val
}

// SetEmail sets the value of Email.
func (s *Invite) SetEmail(val OptString) {
	s.Email = val
}

// SetOrganizationID sets the value of OrganizationID.
func (s *Invite) SetOrganizationID(val OptInt) {
	s.OrganizationID = val
}

// SetToken sets the value of Token.
func (s *Invite) SetToken(val OptString) {
	s.Token = val
}

// SetOrganization sets the value of Organization.
func (s *Invite) SetOrganization(val OptOrganization) {
	s.Organization = val
}

// SetAccepted sets the value of Accepted.
func (s *Invite) SetAccepted(val OptBool) {
	s.Accepted = val
}

type InviteOrganizationMemberOK struct {
	Invited OptInvite `json:"invited"`
}

// GetInvited returns the value of Invited.
func (s *InviteOrganizationMemberOK) GetInvited() OptInvite {
	return s.Invited
}

// SetInvited sets the value of Invited.
func (s *InviteOrganizationMemberOK) SetInvited(val OptInvite) {
	s.Invited = val
}

type InviteOrganizationMemberReq struct {
	// The email of the user you want to invite.
	Email string `json:"email"`
	// The role given to the user.
	Role OptInviteOrganizationMemberReqRole `json:"role"`
}

// GetEmail returns the value of Email.
func (s *InviteOrganizationMemberReq) GetEmail() string {
	return s.Email
}

// GetRole returns the value of Role.
func (s *InviteOrganizationMemberReq) GetRole() OptInviteOrganizationMemberReqRole {
	return s.Role
}

// SetEmail sets the value of Email.
func (s *InviteOrganizationMemberReq) SetEmail(val string) {
	s.Email = val
}

// SetRole sets the value of Role.
func (s *InviteOrganizationMemberReq) SetRole(val OptInviteOrganizationMemberReqRole) {
	s.Role = val
}

// The role given to the user.
type InviteOrganizationMemberReqRole string

const (
	InviteOrganizationMemberReqRoleAdmin  InviteOrganizationMemberReqRole = "admin"
	InviteOrganizationMemberReqRoleMember InviteOrganizationMemberReqRole = "member"
	InviteOrganizationMemberReqRoleViewer InviteOrganizationMemberReqRole = "viewer"
)

// AllValues returns all InviteOrganizationMemberReqRole values.
func (InviteOrganizationMemberReqRole) AllValues() []InviteOrganizationMemberReqRole {
	return []InviteOrganizationMemberReqRole{
		InviteOrganizationMemberReqRoleAdmin,
		InviteOrganizationMemberReqRoleMember,
		InviteOrganizationMemberReqRoleViewer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InviteOrganizationMemberReqRole) MarshalText() ([]byte, error) {
	switch s {
	case InviteOrganizationMemberReqRoleAdmin:
		return []byte(s), nil
	case InviteOrganizationMemberReqRoleMember:
		return []byte(s), nil
	case InviteOrganizationMemberReqRoleViewer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InviteOrganizationMemberReqRole) UnmarshalText(data []byte) error {
	switch InviteOrganizationMemberReqRole(data) {
	case InviteOrganizationMemberReqRoleAdmin:
		*s = InviteOrganizationMemberReqRoleAdmin
		return nil
	case InviteOrganizationMemberReqRoleMember:
		*s = InviteOrganizationMemberReqRoleMember
		return nil
	case InviteOrganizationMemberReqRoleViewer:
		*s = InviteOrganizationMemberReqRoleViewer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The assigned role for the invited user.
type InviteRole string

const (
	InviteRoleAdmin  InviteRole = "admin"
	InviteRoleMember InviteRole = "member"
	InviteRoleViewer InviteRole = "viewer"
)

// AllValues returns all InviteRole values.
func (InviteRole) AllValues() []InviteRole {
	return []InviteRole{
		InviteRoleAdmin,
		InviteRoleMember,
		InviteRoleViewer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s InviteRole) MarshalText() ([]byte, error) {
	switch s {
	case InviteRoleAdmin:
		return []byte(s), nil
	case InviteRoleMember:
		return []byte(s), nil
	case InviteRoleViewer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *InviteRole) UnmarshalText(data []byte) error {
	switch InviteRole(data) {
	case InviteRoleAdmin:
		*s = InviteRoleAdmin
		return nil
	case InviteRoleMember:
		*s = InviteRoleMember
		return nil
	case InviteRoleViewer:
		*s = InviteRoleViewer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAPITokensOK struct {
	Tokens []APIToken `json:"tokens"`
}

// GetTokens returns the value of Tokens.
func (s *ListAPITokensOK) GetTokens() []APIToken {
	return s.Tokens
}

// SetTokens sets the value of Tokens.
func (s *ListAPITokensOK) SetTokens(val []APIToken) {
	s.Tokens = val
}

type ListDatabaseInstancesOK struct {
	Instances []Instance `json:"instances"`
}

// GetInstances returns the value of Instances.
func (s *ListDatabaseInstancesOK) GetInstances() []Instance {
	return s.Instances
}

// SetInstances sets the value of Instances.
func (s *ListDatabaseInstancesOK) SetInstances(val []Instance) {
	s.Instances = val
}

type ListDatabasesOK struct {
	Databases []Database `json:"databases"`
}

// GetDatabases returns the value of Databases.
func (s *ListDatabasesOK) GetDatabases() []Database {
	return s.Databases
}

// SetDatabases sets the value of Databases.
func (s *ListDatabasesOK) SetDatabases(val []Database) {
	s.Databases = val
}

type ListGroupsOK struct {
	Groups []Group `json:"groups"`
}

// GetGroups returns the value of Groups.
func (s *ListGroupsOK) GetGroups() []Group {
	return s.Groups
}

// SetGroups sets the value of Groups.
func (s *ListGroupsOK) SetGroups(val []Group) {
	s.Groups = val
}

type ListLocationsOK struct {
	// A mapping of location codes to location names.
	Locations OptListLocationsOKLocations `json:"locations"`
}

// GetLocations returns the value of Locations.
func (s *ListLocationsOK) GetLocations() OptListLocationsOKLocations {
	return s.Locations
}

// SetLocations sets the value of Locations.
func (s *ListLocationsOK) SetLocations(val OptListLocationsOKLocations) {
	s.Locations = val
}

// A mapping of location codes to location names.
type ListLocationsOKLocations map[string]string

func (s *ListLocationsOKLocations) init() ListLocationsOKLocations {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type ListOrganizationAuditLogsOK struct {
	AuditLogs  []AuditLog                               `json:"audit_logs"`
	Pagination OptListOrganizationAuditLogsOKPagination `json:"pagination"`
}

// GetAuditLogs returns the value of AuditLogs.
func (s *ListOrganizationAuditLogsOK) GetAuditLogs() []AuditLog {
	return s.AuditLogs
}

// GetPagination returns the value of Pagination.
func (s *ListOrganizationAuditLogsOK) GetPagination() OptListOrganizationAuditLogsOKPagination {
	return s.Pagination
}

// SetAuditLogs sets the value of AuditLogs.
func (s *ListOrganizationAuditLogsOK) SetAuditLogs(val []AuditLog) {
	s.AuditLogs = val
}

// SetPagination sets the value of Pagination.
func (s *ListOrganizationAuditLogsOK) SetPagination(val OptListOrganizationAuditLogsOKPagination) {
	s.Pagination = val
}

type ListOrganizationAuditLogsOKPagination struct {
	// The current page number.
	Page OptInt `json:"page"`
	// The number of items per page.
	PageSize OptInt `json:"page_size"`
	// The total number of pages.
	TotalPages OptInt `json:"total_pages"`
	// The total number of items.
	TotalRows OptInt `json:"total_rows"`
}

// GetPage returns the value of Page.
func (s *ListOrganizationAuditLogsOKPagination) GetPage() OptInt {
	return s.Page
}

// GetPageSize returns the value of PageSize.
func (s *ListOrganizationAuditLogsOKPagination) GetPageSize() OptInt {
	return s.PageSize
}

// GetTotalPages returns the value of TotalPages.
func (s *ListOrganizationAuditLogsOKPagination) GetTotalPages() OptInt {
	return s.TotalPages
}

// GetTotalRows returns the value of TotalRows.
func (s *ListOrganizationAuditLogsOKPagination) GetTotalRows() OptInt {
	return s.TotalRows
}

// SetPage sets the value of Page.
func (s *ListOrganizationAuditLogsOKPagination) SetPage(val OptInt) {
	s.Page = val
}

// SetPageSize sets the value of PageSize.
func (s *ListOrganizationAuditLogsOKPagination) SetPageSize(val OptInt) {
	s.PageSize = val
}

// SetTotalPages sets the value of TotalPages.
func (s *ListOrganizationAuditLogsOKPagination) SetTotalPages(val OptInt) {
	s.TotalPages = val
}

// SetTotalRows sets the value of TotalRows.
func (s *ListOrganizationAuditLogsOKPagination) SetTotalRows(val OptInt) {
	s.TotalRows = val
}

type ListOrganizationInvitesOK struct {
	Invites []Invite `json:"invites"`
}

// GetInvites returns the value of Invites.
func (s *ListOrganizationInvitesOK) GetInvites() []Invite {
	return s.Invites
}

// SetInvites sets the value of Invites.
func (s *ListOrganizationInvitesOK) SetInvites(val []Invite) {
	s.Invites = val
}

type ListOrganizationInvoicesOK struct {
	// The list of invoices for the organization.
	Invoices []ListOrganizationInvoicesOKInvoicesItem `json:"invoices"`
}

// GetInvoices returns the value of Invoices.
func (s *ListOrganizationInvoicesOK) GetInvoices() []ListOrganizationInvoicesOKInvoicesItem {
	return s.Invoices
}

// SetInvoices sets the value of Invoices.
func (s *ListOrganizationInvoicesOK) SetInvoices(val []ListOrganizationInvoicesOKInvoicesItem) {
	s.Invoices = val
}

type ListOrganizationInvoicesOKInvoicesItem struct {
	// The unique ID for the invoice.
	InvoiceNumber OptString `json:"invoice_number"`
	// The formatted price in USD for the invoice.
	AmountDue OptString `json:"amount_due"`
	// The due date for the invoice.
	DueDate OptString `json:"due_date"`
	// The date the invoice was paid.
	PaidAt OptString `json:"paid_at"`
	// The date the invoice payment last failed.
	PaymentFailedAt OptString `json:"payment_failed_at"`
	// The link to the invoice PDF you can download.
	InvoicePdf OptString `json:"invoice_pdf"`
}

// GetInvoiceNumber returns the value of InvoiceNumber.
func (s *ListOrganizationInvoicesOKInvoicesItem) GetInvoiceNumber() OptString {
	return s.InvoiceNumber
}

// GetAmountDue returns the value of AmountDue.
func (s *ListOrganizationInvoicesOKInvoicesItem) GetAmountDue() OptString {
	return s.AmountDue
}

// GetDueDate returns the value of DueDate.
func (s *ListOrganizationInvoicesOKInvoicesItem) GetDueDate() OptString {
	return s.DueDate
}

// GetPaidAt returns the value of PaidAt.
func (s *ListOrganizationInvoicesOKInvoicesItem) GetPaidAt() OptString {
	return s.PaidAt
}

// GetPaymentFailedAt returns the value of PaymentFailedAt.
func (s *ListOrganizationInvoicesOKInvoicesItem) GetPaymentFailedAt() OptString {
	return s.PaymentFailedAt
}

// GetInvoicePdf returns the value of InvoicePdf.
func (s *ListOrganizationInvoicesOKInvoicesItem) GetInvoicePdf() OptString {
	return s.InvoicePdf
}

// SetInvoiceNumber sets the value of InvoiceNumber.
func (s *ListOrganizationInvoicesOKInvoicesItem) SetInvoiceNumber(val OptString) {
	s.InvoiceNumber = val
}

// SetAmountDue sets the value of AmountDue.
func (s *ListOrganizationInvoicesOKInvoicesItem) SetAmountDue(val OptString) {
	s.AmountDue = val
}

// SetDueDate sets the value of DueDate.
func (s *ListOrganizationInvoicesOKInvoicesItem) SetDueDate(val OptString) {
	s.DueDate = val
}

// SetPaidAt sets the value of PaidAt.
func (s *ListOrganizationInvoicesOKInvoicesItem) SetPaidAt(val OptString) {
	s.PaidAt = val
}

// SetPaymentFailedAt sets the value of PaymentFailedAt.
func (s *ListOrganizationInvoicesOKInvoicesItem) SetPaymentFailedAt(val OptString) {
	s.PaymentFailedAt = val
}

// SetInvoicePdf sets the value of InvoicePdf.
func (s *ListOrganizationInvoicesOKInvoicesItem) SetInvoicePdf(val OptString) {
	s.InvoicePdf = val
}

type ListOrganizationInvoicesType string

const (
	ListOrganizationInvoicesTypeAll      ListOrganizationInvoicesType = "all"
	ListOrganizationInvoicesTypeUpcoming ListOrganizationInvoicesType = "upcoming"
	ListOrganizationInvoicesTypeIssued   ListOrganizationInvoicesType = "issued"
)

// AllValues returns all ListOrganizationInvoicesType values.
func (ListOrganizationInvoicesType) AllValues() []ListOrganizationInvoicesType {
	return []ListOrganizationInvoicesType{
		ListOrganizationInvoicesTypeAll,
		ListOrganizationInvoicesTypeUpcoming,
		ListOrganizationInvoicesTypeIssued,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListOrganizationInvoicesType) MarshalText() ([]byte, error) {
	switch s {
	case ListOrganizationInvoicesTypeAll:
		return []byte(s), nil
	case ListOrganizationInvoicesTypeUpcoming:
		return []byte(s), nil
	case ListOrganizationInvoicesTypeIssued:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListOrganizationInvoicesType) UnmarshalText(data []byte) error {
	switch ListOrganizationInvoicesType(data) {
	case ListOrganizationInvoicesTypeAll:
		*s = ListOrganizationInvoicesTypeAll
		return nil
	case ListOrganizationInvoicesTypeUpcoming:
		*s = ListOrganizationInvoicesTypeUpcoming
		return nil
	case ListOrganizationInvoicesTypeIssued:
		*s = ListOrganizationInvoicesTypeIssued
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListOrganizationMembersOK struct {
	Members []Member `json:"members"`
}

// GetMembers returns the value of Members.
func (s *ListOrganizationMembersOK) GetMembers() []Member {
	return s.Members
}

// SetMembers sets the value of Members.
func (s *ListOrganizationMembersOK) SetMembers(val []Member) {
	s.Members = val
}

type ListOrganizationPlansOK struct {
	// List of available plans.
	Plans []OrganizationPlan `json:"plans"`
}

// GetPlans returns the value of Plans.
func (s *ListOrganizationPlansOK) GetPlans() []OrganizationPlan {
	return s.Plans
}

// SetPlans sets the value of Plans.
func (s *ListOrganizationPlansOK) SetPlans(val []OrganizationPlan) {
	s.Plans = val
}

// Ref: #/components/schemas/Member
type Member struct {
	// The username for the member.
	Username OptString `json:"username"`
	// The role assigned to the member.
	Role OptMemberRole `json:"role"`
	// The email for the member.
	Email OptString `json:"email"`
}

// GetUsername returns the value of Username.
func (s *Member) GetUsername() OptString {
	return s.Username
}

// GetRole returns the value of Role.
func (s *Member) GetRole() OptMemberRole {
	return s.Role
}

// GetEmail returns the value of Email.
func (s *Member) GetEmail() OptString {
	return s.Email
}

// SetUsername sets the value of Username.
func (s *Member) SetUsername(val OptString) {
	s.Username = val
}

// SetRole sets the value of Role.
func (s *Member) SetRole(val OptMemberRole) {
	s.Role = val
}

// SetEmail sets the value of Email.
func (s *Member) SetEmail(val OptString) {
	s.Email = val
}

// The role assigned to the member.
type MemberRole string

const (
	MemberRoleOwner  MemberRole = "owner"
	MemberRoleAdmin  MemberRole = "admin"
	MemberRoleMember MemberRole = "member"
	MemberRoleViewer MemberRole = "viewer"
)

// AllValues returns all MemberRole values.
func (MemberRole) AllValues() []MemberRole {
	return []MemberRole{
		MemberRoleOwner,
		MemberRoleAdmin,
		MemberRoleMember,
		MemberRoleViewer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MemberRole) MarshalText() ([]byte, error) {
	switch s {
	case MemberRoleOwner:
		return []byte(s), nil
	case MemberRoleAdmin:
		return []byte(s), nil
	case MemberRoleMember:
		return []byte(s), nil
	case MemberRoleViewer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MemberRole) UnmarshalText(data []byte) error {
	switch MemberRole(data) {
	case MemberRoleOwner:
		*s = MemberRoleOwner
		return nil
	case MemberRoleAdmin:
		*s = MemberRoleAdmin
		return nil
	case MemberRoleMember:
		*s = MemberRoleMember
		return nil
	case MemberRoleViewer:
		*s = MemberRoleViewer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type Name string

// Ref: #/components/schemas/NewGroup
type NewGroup struct {
	// The name of the new group.
	Name string `json:"name"`
	// The location key for the new group.
	Location   string        `json:"location"`
	Extensions OptExtensions `json:"extensions"`
}

// GetName returns the value of Name.
func (s *NewGroup) GetName() string {
	return s.Name
}

// GetLocation returns the value of Location.
func (s *NewGroup) GetLocation() string {
	return s.Location
}

// GetExtensions returns the value of Extensions.
func (s *NewGroup) GetExtensions() OptExtensions {
	return s.Extensions
}

// SetName sets the value of Name.
func (s *NewGroup) SetName(val string) {
	s.Name = val
}

// SetLocation sets the value of Location.
func (s *NewGroup) SetLocation(val string) {
	s.Location = val
}

// SetExtensions sets the value of Extensions.
func (s *NewGroup) SetExtensions(val OptExtensions) {
	s.Extensions = val
}

// NewOptAddOrganizationMemberReqRole returns new OptAddOrganizationMemberReqRole with value set to v.
func NewOptAddOrganizationMemberReqRole(v AddOrganizationMemberReqRole) OptAddOrganizationMemberReqRole {
	return OptAddOrganizationMemberReqRole{
		Value: v,
		Set:   true,
	}
}

// OptAddOrganizationMemberReqRole is optional AddOrganizationMemberReqRole.
type OptAddOrganizationMemberReqRole struct {
	Value AddOrganizationMemberReqRole
	Set   bool
}

// IsSet returns true if OptAddOrganizationMemberReqRole was set.
func (o OptAddOrganizationMemberReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAddOrganizationMemberReqRole) Reset() {
	var v AddOrganizationMemberReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAddOrganizationMemberReqRole) SetTo(v AddOrganizationMemberReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAddOrganizationMemberReqRole) Get() (v AddOrganizationMemberReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAddOrganizationMemberReqRole) Or(d AddOrganizationMemberReqRole) AddOrganizationMemberReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptAuditLogCode returns new OptAuditLogCode with value set to v.
func NewOptAuditLogCode(v AuditLogCode) OptAuditLogCode {
	return OptAuditLogCode{
		Value: v,
		Set:   true,
	}
}

// OptAuditLogCode is optional AuditLogCode.
type OptAuditLogCode struct {
	Value AuditLogCode
	Set   bool
}

// IsSet returns true if OptAuditLogCode was set.
func (o OptAuditLogCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptAuditLogCode) Reset() {
	var v AuditLogCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptAuditLogCode) SetTo(v AuditLogCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptAuditLogCode) Get() (v AuditLogCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptAuditLogCode) Or(d AuditLogCode) AuditLogCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDatabaseInputSeed returns new OptCreateDatabaseInputSeed with value set to v.
func NewOptCreateDatabaseInputSeed(v CreateDatabaseInputSeed) OptCreateDatabaseInputSeed {
	return OptCreateDatabaseInputSeed{
		Value: v,
		Set:   true,
	}
}

// OptCreateDatabaseInputSeed is optional CreateDatabaseInputSeed.
type OptCreateDatabaseInputSeed struct {
	Value CreateDatabaseInputSeed
	Set   bool
}

// IsSet returns true if OptCreateDatabaseInputSeed was set.
func (o OptCreateDatabaseInputSeed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDatabaseInputSeed) Reset() {
	var v CreateDatabaseInputSeed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDatabaseInputSeed) SetTo(v CreateDatabaseInputSeed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDatabaseInputSeed) Get() (v CreateDatabaseInputSeed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDatabaseInputSeed) Or(d CreateDatabaseInputSeed) CreateDatabaseInputSeed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDatabaseInputSeedType returns new OptCreateDatabaseInputSeedType with value set to v.
func NewOptCreateDatabaseInputSeedType(v CreateDatabaseInputSeedType) OptCreateDatabaseInputSeedType {
	return OptCreateDatabaseInputSeedType{
		Value: v,
		Set:   true,
	}
}

// OptCreateDatabaseInputSeedType is optional CreateDatabaseInputSeedType.
type OptCreateDatabaseInputSeedType struct {
	Value CreateDatabaseInputSeedType
	Set   bool
}

// IsSet returns true if OptCreateDatabaseInputSeedType was set.
func (o OptCreateDatabaseInputSeedType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDatabaseInputSeedType) Reset() {
	var v CreateDatabaseInputSeedType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDatabaseInputSeedType) SetTo(v CreateDatabaseInputSeedType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDatabaseInputSeedType) Get() (v CreateDatabaseInputSeedType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDatabaseInputSeedType) Or(d CreateDatabaseInputSeedType) CreateDatabaseInputSeedType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDatabaseOutput returns new OptCreateDatabaseOutput with value set to v.
func NewOptCreateDatabaseOutput(v CreateDatabaseOutput) OptCreateDatabaseOutput {
	return OptCreateDatabaseOutput{
		Value: v,
		Set:   true,
	}
}

// OptCreateDatabaseOutput is optional CreateDatabaseOutput.
type OptCreateDatabaseOutput struct {
	Value CreateDatabaseOutput
	Set   bool
}

// IsSet returns true if OptCreateDatabaseOutput was set.
func (o OptCreateDatabaseOutput) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDatabaseOutput) Reset() {
	var v CreateDatabaseOutput
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDatabaseOutput) SetTo(v CreateDatabaseOutput) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDatabaseOutput) Get() (v CreateDatabaseOutput, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDatabaseOutput) Or(d CreateDatabaseOutput) CreateDatabaseOutput {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateDatabaseTokenAuthorization returns new OptCreateDatabaseTokenAuthorization with value set to v.
func NewOptCreateDatabaseTokenAuthorization(v CreateDatabaseTokenAuthorization) OptCreateDatabaseTokenAuthorization {
	return OptCreateDatabaseTokenAuthorization{
		Value: v,
		Set:   true,
	}
}

// OptCreateDatabaseTokenAuthorization is optional CreateDatabaseTokenAuthorization.
type OptCreateDatabaseTokenAuthorization struct {
	Value CreateDatabaseTokenAuthorization
	Set   bool
}

// IsSet returns true if OptCreateDatabaseTokenAuthorization was set.
func (o OptCreateDatabaseTokenAuthorization) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateDatabaseTokenAuthorization) Reset() {
	var v CreateDatabaseTokenAuthorization
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateDatabaseTokenAuthorization) SetTo(v CreateDatabaseTokenAuthorization) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateDatabaseTokenAuthorization) Get() (v CreateDatabaseTokenAuthorization, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateDatabaseTokenAuthorization) Or(d CreateDatabaseTokenAuthorization) CreateDatabaseTokenAuthorization {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateGroupTokenAuthorization returns new OptCreateGroupTokenAuthorization with value set to v.
func NewOptCreateGroupTokenAuthorization(v CreateGroupTokenAuthorization) OptCreateGroupTokenAuthorization {
	return OptCreateGroupTokenAuthorization{
		Value: v,
		Set:   true,
	}
}

// OptCreateGroupTokenAuthorization is optional CreateGroupTokenAuthorization.
type OptCreateGroupTokenAuthorization struct {
	Value CreateGroupTokenAuthorization
	Set   bool
}

// IsSet returns true if OptCreateGroupTokenAuthorization was set.
func (o OptCreateGroupTokenAuthorization) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateGroupTokenAuthorization) Reset() {
	var v CreateGroupTokenAuthorization
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateGroupTokenAuthorization) SetTo(v CreateGroupTokenAuthorization) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateGroupTokenAuthorization) Get() (v CreateGroupTokenAuthorization, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateGroupTokenAuthorization) Or(d CreateGroupTokenAuthorization) CreateGroupTokenAuthorization {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTokenInput returns new OptCreateTokenInput with value set to v.
func NewOptCreateTokenInput(v CreateTokenInput) OptCreateTokenInput {
	return OptCreateTokenInput{
		Value: v,
		Set:   true,
	}
}

// OptCreateTokenInput is optional CreateTokenInput.
type OptCreateTokenInput struct {
	Value CreateTokenInput
	Set   bool
}

// IsSet returns true if OptCreateTokenInput was set.
func (o OptCreateTokenInput) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTokenInput) Reset() {
	var v CreateTokenInput
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTokenInput) SetTo(v CreateTokenInput) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTokenInput) Get() (v CreateTokenInput, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTokenInput) Or(d CreateTokenInput) CreateTokenInput {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTokenInputPermissions returns new OptCreateTokenInputPermissions with value set to v.
func NewOptCreateTokenInputPermissions(v CreateTokenInputPermissions) OptCreateTokenInputPermissions {
	return OptCreateTokenInputPermissions{
		Value: v,
		Set:   true,
	}
}

// OptCreateTokenInputPermissions is optional CreateTokenInputPermissions.
type OptCreateTokenInputPermissions struct {
	Value CreateTokenInputPermissions
	Set   bool
}

// IsSet returns true if OptCreateTokenInputPermissions was set.
func (o OptCreateTokenInputPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTokenInputPermissions) Reset() {
	var v CreateTokenInputPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTokenInputPermissions) SetTo(v CreateTokenInputPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTokenInputPermissions) Get() (v CreateTokenInputPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTokenInputPermissions) Or(d CreateTokenInputPermissions) CreateTokenInputPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTokenInputPermissionsReadAttach returns new OptCreateTokenInputPermissionsReadAttach with value set to v.
func NewOptCreateTokenInputPermissionsReadAttach(v CreateTokenInputPermissionsReadAttach) OptCreateTokenInputPermissionsReadAttach {
	return OptCreateTokenInputPermissionsReadAttach{
		Value: v,
		Set:   true,
	}
}

// OptCreateTokenInputPermissionsReadAttach is optional CreateTokenInputPermissionsReadAttach.
type OptCreateTokenInputPermissionsReadAttach struct {
	Value CreateTokenInputPermissionsReadAttach
	Set   bool
}

// IsSet returns true if OptCreateTokenInputPermissionsReadAttach was set.
func (o OptCreateTokenInputPermissionsReadAttach) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTokenInputPermissionsReadAttach) Reset() {
	var v CreateTokenInputPermissionsReadAttach
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTokenInputPermissionsReadAttach) SetTo(v CreateTokenInputPermissionsReadAttach) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTokenInputPermissionsReadAttach) Get() (v CreateTokenInputPermissionsReadAttach, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTokenInputPermissionsReadAttach) Or(d CreateTokenInputPermissionsReadAttach) CreateTokenInputPermissionsReadAttach {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabase returns new OptDatabase with value set to v.
func NewOptDatabase(v Database) OptDatabase {
	return OptDatabase{
		Value: v,
		Set:   true,
	}
}

// OptDatabase is optional Database.
type OptDatabase struct {
	Value Database
	Set   bool
}

// IsSet returns true if OptDatabase was set.
func (o OptDatabase) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabase) Reset() {
	var v Database
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabase) SetTo(v Database) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabase) Get() (v Database, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabase) Or(d Database) Database {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseUsageObject returns new OptDatabaseUsageObject with value set to v.
func NewOptDatabaseUsageObject(v DatabaseUsageObject) OptDatabaseUsageObject {
	return OptDatabaseUsageObject{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseUsageObject is optional DatabaseUsageObject.
type OptDatabaseUsageObject struct {
	Value DatabaseUsageObject
	Set   bool
}

// IsSet returns true if OptDatabaseUsageObject was set.
func (o OptDatabaseUsageObject) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseUsageObject) Reset() {
	var v DatabaseUsageObject
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseUsageObject) SetTo(v DatabaseUsageObject) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseUsageObject) Get() (v DatabaseUsageObject, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseUsageObject) Or(d DatabaseUsageObject) DatabaseUsageObject {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDatabaseUsageOutput returns new OptDatabaseUsageOutput with value set to v.
func NewOptDatabaseUsageOutput(v DatabaseUsageOutput) OptDatabaseUsageOutput {
	return OptDatabaseUsageOutput{
		Value: v,
		Set:   true,
	}
}

// OptDatabaseUsageOutput is optional DatabaseUsageOutput.
type OptDatabaseUsageOutput struct {
	Value DatabaseUsageOutput
	Set   bool
}

// IsSet returns true if OptDatabaseUsageOutput was set.
func (o OptDatabaseUsageOutput) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDatabaseUsageOutput) Reset() {
	var v DatabaseUsageOutput
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDatabaseUsageOutput) SetTo(v DatabaseUsageOutput) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDatabaseUsageOutput) Get() (v DatabaseUsageOutput, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDatabaseUsageOutput) Or(d DatabaseUsageOutput) DatabaseUsageOutput {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDbId returns new OptDbId with value set to v.
func NewOptDbId(v DbId) OptDbId {
	return OptDbId{
		Value: v,
		Set:   true,
	}
}

// OptDbId is optional DbId.
type OptDbId struct {
	Value DbId
	Set   bool
}

// IsSet returns true if OptDbId was set.
func (o OptDbId) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDbId) Reset() {
	var v DbId
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDbId) SetTo(v DbId) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDbId) Get() (v DbId, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDbId) Or(d DbId) DbId {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExtensions returns new OptExtensions with value set to v.
func NewOptExtensions(v Extensions) OptExtensions {
	return OptExtensions{
		Value: v,
		Set:   true,
	}
}

// OptExtensions is optional Extensions.
type OptExtensions struct {
	Value Extensions
	Set   bool
}

// IsSet returns true if OptExtensions was set.
func (o OptExtensions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExtensions) Reset() {
	var v Extensions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExtensions) SetTo(v Extensions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExtensions) Get() (v Extensions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExtensions) Or(d Extensions) Extensions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrganizationSubscriptionOKSubscription returns new OptGetOrganizationSubscriptionOKSubscription with value set to v.
func NewOptGetOrganizationSubscriptionOKSubscription(v GetOrganizationSubscriptionOKSubscription) OptGetOrganizationSubscriptionOKSubscription {
	return OptGetOrganizationSubscriptionOKSubscription{
		Value: v,
		Set:   true,
	}
}

// OptGetOrganizationSubscriptionOKSubscription is optional GetOrganizationSubscriptionOKSubscription.
type OptGetOrganizationSubscriptionOKSubscription struct {
	Value GetOrganizationSubscriptionOKSubscription
	Set   bool
}

// IsSet returns true if OptGetOrganizationSubscriptionOKSubscription was set.
func (o OptGetOrganizationSubscriptionOKSubscription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrganizationSubscriptionOKSubscription) Reset() {
	var v GetOrganizationSubscriptionOKSubscription
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrganizationSubscriptionOKSubscription) SetTo(v GetOrganizationSubscriptionOKSubscription) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrganizationSubscriptionOKSubscription) Get() (v GetOrganizationSubscriptionOKSubscription, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrganizationSubscriptionOKSubscription) Or(d GetOrganizationSubscriptionOKSubscription) GetOrganizationSubscriptionOKSubscription {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrganizationUsageOKOrganization returns new OptGetOrganizationUsageOKOrganization with value set to v.
func NewOptGetOrganizationUsageOKOrganization(v GetOrganizationUsageOKOrganization) OptGetOrganizationUsageOKOrganization {
	return OptGetOrganizationUsageOKOrganization{
		Value: v,
		Set:   true,
	}
}

// OptGetOrganizationUsageOKOrganization is optional GetOrganizationUsageOKOrganization.
type OptGetOrganizationUsageOKOrganization struct {
	Value GetOrganizationUsageOKOrganization
	Set   bool
}

// IsSet returns true if OptGetOrganizationUsageOKOrganization was set.
func (o OptGetOrganizationUsageOKOrganization) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrganizationUsageOKOrganization) Reset() {
	var v GetOrganizationUsageOKOrganization
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrganizationUsageOKOrganization) SetTo(v GetOrganizationUsageOKOrganization) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrganizationUsageOKOrganization) Get() (v GetOrganizationUsageOKOrganization, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrganizationUsageOKOrganization) Or(d GetOrganizationUsageOKOrganization) GetOrganizationUsageOKOrganization {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetOrganizationUsageOKOrganizationUsage returns new OptGetOrganizationUsageOKOrganizationUsage with value set to v.
func NewOptGetOrganizationUsageOKOrganizationUsage(v GetOrganizationUsageOKOrganizationUsage) OptGetOrganizationUsageOKOrganizationUsage {
	return OptGetOrganizationUsageOKOrganizationUsage{
		Value: v,
		Set:   true,
	}
}

// OptGetOrganizationUsageOKOrganizationUsage is optional GetOrganizationUsageOKOrganizationUsage.
type OptGetOrganizationUsageOKOrganizationUsage struct {
	Value GetOrganizationUsageOKOrganizationUsage
	Set   bool
}

// IsSet returns true if OptGetOrganizationUsageOKOrganizationUsage was set.
func (o OptGetOrganizationUsageOKOrganizationUsage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetOrganizationUsageOKOrganizationUsage) Reset() {
	var v GetOrganizationUsageOKOrganizationUsage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetOrganizationUsageOKOrganizationUsage) SetTo(v GetOrganizationUsageOKOrganizationUsage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetOrganizationUsageOKOrganizationUsage) Get() (v GetOrganizationUsageOKOrganizationUsage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetOrganizationUsageOKOrganizationUsage) Or(d GetOrganizationUsageOKOrganizationUsage) GetOrganizationUsageOKOrganizationUsage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGroup returns new OptGroup with value set to v.
func NewOptGroup(v Group) OptGroup {
	return OptGroup{
		Value: v,
		Set:   true,
	}
}

// OptGroup is optional Group.
type OptGroup struct {
	Value Group
	Set   bool
}

// IsSet returns true if OptGroup was set.
func (o OptGroup) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGroup) Reset() {
	var v Group
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGroup) SetTo(v Group) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGroup) Get() (v Group, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGroup) Or(d Group) Group {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptHostname returns new OptHostname with value set to v.
func NewOptHostname(v Hostname) OptHostname {
	return OptHostname{
		Value: v,
		Set:   true,
	}
}

// OptHostname is optional Hostname.
type OptHostname struct {
	Value Hostname
	Set   bool
}

// IsSet returns true if OptHostname was set.
func (o OptHostname) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptHostname) Reset() {
	var v Hostname
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptHostname) SetTo(v Hostname) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptHostname) Get() (v Hostname, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptHostname) Or(d Hostname) Hostname {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstance returns new OptInstance with value set to v.
func NewOptInstance(v Instance) OptInstance {
	return OptInstance{
		Value: v,
		Set:   true,
	}
}

// OptInstance is optional Instance.
type OptInstance struct {
	Value Instance
	Set   bool
}

// IsSet returns true if OptInstance was set.
func (o OptInstance) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstance) Reset() {
	var v Instance
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstance) SetTo(v Instance) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstance) Get() (v Instance, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstance) Or(d Instance) Instance {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstanceType returns new OptInstanceType with value set to v.
func NewOptInstanceType(v InstanceType) OptInstanceType {
	return OptInstanceType{
		Value: v,
		Set:   true,
	}
}

// OptInstanceType is optional InstanceType.
type OptInstanceType struct {
	Value InstanceType
	Set   bool
}

// IsSet returns true if OptInstanceType was set.
func (o OptInstanceType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstanceType) Reset() {
	var v InstanceType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstanceType) SetTo(v InstanceType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstanceType) Get() (v InstanceType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstanceType) Or(d InstanceType) InstanceType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInvite returns new OptInvite with value set to v.
func NewOptInvite(v Invite) OptInvite {
	return OptInvite{
		Value: v,
		Set:   true,
	}
}

// OptInvite is optional Invite.
type OptInvite struct {
	Value Invite
	Set   bool
}

// IsSet returns true if OptInvite was set.
func (o OptInvite) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInvite) Reset() {
	var v Invite
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInvite) SetTo(v Invite) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInvite) Get() (v Invite, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInvite) Or(d Invite) Invite {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInviteOrganizationMemberReqRole returns new OptInviteOrganizationMemberReqRole with value set to v.
func NewOptInviteOrganizationMemberReqRole(v InviteOrganizationMemberReqRole) OptInviteOrganizationMemberReqRole {
	return OptInviteOrganizationMemberReqRole{
		Value: v,
		Set:   true,
	}
}

// OptInviteOrganizationMemberReqRole is optional InviteOrganizationMemberReqRole.
type OptInviteOrganizationMemberReqRole struct {
	Value InviteOrganizationMemberReqRole
	Set   bool
}

// IsSet returns true if OptInviteOrganizationMemberReqRole was set.
func (o OptInviteOrganizationMemberReqRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInviteOrganizationMemberReqRole) Reset() {
	var v InviteOrganizationMemberReqRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInviteOrganizationMemberReqRole) SetTo(v InviteOrganizationMemberReqRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInviteOrganizationMemberReqRole) Get() (v InviteOrganizationMemberReqRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInviteOrganizationMemberReqRole) Or(d InviteOrganizationMemberReqRole) InviteOrganizationMemberReqRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInviteRole returns new OptInviteRole with value set to v.
func NewOptInviteRole(v InviteRole) OptInviteRole {
	return OptInviteRole{
		Value: v,
		Set:   true,
	}
}

// OptInviteRole is optional InviteRole.
type OptInviteRole struct {
	Value InviteRole
	Set   bool
}

// IsSet returns true if OptInviteRole was set.
func (o OptInviteRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInviteRole) Reset() {
	var v InviteRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInviteRole) SetTo(v InviteRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInviteRole) Get() (v InviteRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInviteRole) Or(d InviteRole) InviteRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListLocationsOKLocations returns new OptListLocationsOKLocations with value set to v.
func NewOptListLocationsOKLocations(v ListLocationsOKLocations) OptListLocationsOKLocations {
	return OptListLocationsOKLocations{
		Value: v,
		Set:   true,
	}
}

// OptListLocationsOKLocations is optional ListLocationsOKLocations.
type OptListLocationsOKLocations struct {
	Value ListLocationsOKLocations
	Set   bool
}

// IsSet returns true if OptListLocationsOKLocations was set.
func (o OptListLocationsOKLocations) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListLocationsOKLocations) Reset() {
	var v ListLocationsOKLocations
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListLocationsOKLocations) SetTo(v ListLocationsOKLocations) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListLocationsOKLocations) Get() (v ListLocationsOKLocations, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListLocationsOKLocations) Or(d ListLocationsOKLocations) ListLocationsOKLocations {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListOrganizationAuditLogsOKPagination returns new OptListOrganizationAuditLogsOKPagination with value set to v.
func NewOptListOrganizationAuditLogsOKPagination(v ListOrganizationAuditLogsOKPagination) OptListOrganizationAuditLogsOKPagination {
	return OptListOrganizationAuditLogsOKPagination{
		Value: v,
		Set:   true,
	}
}

// OptListOrganizationAuditLogsOKPagination is optional ListOrganizationAuditLogsOKPagination.
type OptListOrganizationAuditLogsOKPagination struct {
	Value ListOrganizationAuditLogsOKPagination
	Set   bool
}

// IsSet returns true if OptListOrganizationAuditLogsOKPagination was set.
func (o OptListOrganizationAuditLogsOKPagination) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListOrganizationAuditLogsOKPagination) Reset() {
	var v ListOrganizationAuditLogsOKPagination
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListOrganizationAuditLogsOKPagination) SetTo(v ListOrganizationAuditLogsOKPagination) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListOrganizationAuditLogsOKPagination) Get() (v ListOrganizationAuditLogsOKPagination, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListOrganizationAuditLogsOKPagination) Or(d ListOrganizationAuditLogsOKPagination) ListOrganizationAuditLogsOKPagination {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListOrganizationInvoicesType returns new OptListOrganizationInvoicesType with value set to v.
func NewOptListOrganizationInvoicesType(v ListOrganizationInvoicesType) OptListOrganizationInvoicesType {
	return OptListOrganizationInvoicesType{
		Value: v,
		Set:   true,
	}
}

// OptListOrganizationInvoicesType is optional ListOrganizationInvoicesType.
type OptListOrganizationInvoicesType struct {
	Value ListOrganizationInvoicesType
	Set   bool
}

// IsSet returns true if OptListOrganizationInvoicesType was set.
func (o OptListOrganizationInvoicesType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListOrganizationInvoicesType) Reset() {
	var v ListOrganizationInvoicesType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListOrganizationInvoicesType) SetTo(v ListOrganizationInvoicesType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListOrganizationInvoicesType) Get() (v ListOrganizationInvoicesType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListOrganizationInvoicesType) Or(d ListOrganizationInvoicesType) ListOrganizationInvoicesType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMember returns new OptMember with value set to v.
func NewOptMember(v Member) OptMember {
	return OptMember{
		Value: v,
		Set:   true,
	}
}

// OptMember is optional Member.
type OptMember struct {
	Value Member
	Set   bool
}

// IsSet returns true if OptMember was set.
func (o OptMember) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMember) Reset() {
	var v Member
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMember) SetTo(v Member) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMember) Get() (v Member, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMember) Or(d Member) Member {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMemberRole returns new OptMemberRole with value set to v.
func NewOptMemberRole(v MemberRole) OptMemberRole {
	return OptMemberRole{
		Value: v,
		Set:   true,
	}
}

// OptMemberRole is optional MemberRole.
type OptMemberRole struct {
	Value MemberRole
	Set   bool
}

// IsSet returns true if OptMemberRole was set.
func (o OptMemberRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMemberRole) Reset() {
	var v MemberRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMemberRole) SetTo(v MemberRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMemberRole) Get() (v MemberRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMemberRole) Or(d MemberRole) MemberRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptName returns new OptName with value set to v.
func NewOptName(v Name) OptName {
	return OptName{
		Value: v,
		Set:   true,
	}
}

// OptName is optional Name.
type OptName struct {
	Value Name
	Set   bool
}

// IsSet returns true if OptName was set.
func (o OptName) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptName) Reset() {
	var v Name
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptName) SetTo(v Name) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptName) Get() (v Name, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptName) Or(d Name) Name {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDatabaseStatsOutputArray returns new OptNilDatabaseStatsOutputArray with value set to v.
func NewOptNilDatabaseStatsOutputArray(v []DatabaseStatsOutput) OptNilDatabaseStatsOutputArray {
	return OptNilDatabaseStatsOutputArray{
		Value: v,
		Set:   true,
	}
}

// OptNilDatabaseStatsOutputArray is optional nullable []DatabaseStatsOutput.
type OptNilDatabaseStatsOutputArray struct {
	Value []DatabaseStatsOutput
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDatabaseStatsOutputArray was set.
func (o OptNilDatabaseStatsOutputArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDatabaseStatsOutputArray) Reset() {
	var v []DatabaseStatsOutput
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDatabaseStatsOutputArray) SetTo(v []DatabaseStatsOutput) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDatabaseStatsOutputArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDatabaseStatsOutputArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []DatabaseStatsOutput
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDatabaseStatsOutputArray) Get() (v []DatabaseStatsOutput, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDatabaseStatsOutputArray) Or(d []DatabaseStatsOutput) []DatabaseStatsOutput {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrganization returns new OptOrganization with value set to v.
func NewOptOrganization(v Organization) OptOrganization {
	return OptOrganization{
		Value: v,
		Set:   true,
	}
}

// OptOrganization is optional Organization.
type OptOrganization struct {
	Value Organization
	Set   bool
}

// IsSet returns true if OptOrganization was set.
func (o OptOrganization) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrganization) Reset() {
	var v Organization
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrganization) SetTo(v Organization) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrganization) Get() (v Organization, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrganization) Or(d Organization) Organization {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrganizationType returns new OptOrganizationType with value set to v.
func NewOptOrganizationType(v OrganizationType) OptOrganizationType {
	return OptOrganizationType{
		Value: v,
		Set:   true,
	}
}

// OptOrganizationType is optional OrganizationType.
type OptOrganizationType struct {
	Value OrganizationType
	Set   bool
}

// IsSet returns true if OptOrganizationType was set.
func (o OptOrganizationType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrganizationType) Reset() {
	var v OrganizationType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrganizationType) SetTo(v OrganizationType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrganizationType) Get() (v OrganizationType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrganizationType) Or(d OrganizationType) OrganizationType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlanQuotas returns new OptPlanQuotas with value set to v.
func NewOptPlanQuotas(v PlanQuotas) OptPlanQuotas {
	return OptPlanQuotas{
		Value: v,
		Set:   true,
	}
}

// OptPlanQuotas is optional PlanQuotas.
type OptPlanQuotas struct {
	Value PlanQuotas
	Set   bool
}

// IsSet returns true if OptPlanQuotas was set.
func (o OptPlanQuotas) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlanQuotas) Reset() {
	var v PlanQuotas
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlanQuotas) SetTo(v PlanQuotas) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlanQuotas) Get() (v PlanQuotas, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlanQuotas) Or(d PlanQuotas) PlanQuotas {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRole returns new OptRole with value set to v.
func NewOptRole(v Role) OptRole {
	return OptRole{
		Value: v,
		Set:   true,
	}
}

// OptRole is optional Role.
type OptRole struct {
	Value Role
	Set   bool
}

// IsSet returns true if OptRole was set.
func (o OptRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRole) Reset() {
	var v Role
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRole) SetTo(v Role) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRole) Get() (v Role, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRole) Or(d Role) Role {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateMemberRoleOKMember returns new OptUpdateMemberRoleOKMember with value set to v.
func NewOptUpdateMemberRoleOKMember(v UpdateMemberRoleOKMember) OptUpdateMemberRoleOKMember {
	return OptUpdateMemberRoleOKMember{
		Value: v,
		Set:   true,
	}
}

// OptUpdateMemberRoleOKMember is optional UpdateMemberRoleOKMember.
type OptUpdateMemberRoleOKMember struct {
	Value UpdateMemberRoleOKMember
	Set   bool
}

// IsSet returns true if OptUpdateMemberRoleOKMember was set.
func (o OptUpdateMemberRoleOKMember) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateMemberRoleOKMember) Reset() {
	var v UpdateMemberRoleOKMember
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateMemberRoleOKMember) SetTo(v UpdateMemberRoleOKMember) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateMemberRoleOKMember) Get() (v UpdateMemberRoleOKMember, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateMemberRoleOKMember) Or(d UpdateMemberRoleOKMember) UpdateMemberRoleOKMember {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateMemberRoleOKMemberRole returns new OptUpdateMemberRoleOKMemberRole with value set to v.
func NewOptUpdateMemberRoleOKMemberRole(v UpdateMemberRoleOKMemberRole) OptUpdateMemberRoleOKMemberRole {
	return OptUpdateMemberRoleOKMemberRole{
		Value: v,
		Set:   true,
	}
}

// OptUpdateMemberRoleOKMemberRole is optional UpdateMemberRoleOKMemberRole.
type OptUpdateMemberRoleOKMemberRole struct {
	Value UpdateMemberRoleOKMemberRole
	Set   bool
}

// IsSet returns true if OptUpdateMemberRoleOKMemberRole was set.
func (o OptUpdateMemberRoleOKMemberRole) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateMemberRoleOKMemberRole) Reset() {
	var v UpdateMemberRoleOKMemberRole
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateMemberRoleOKMemberRole) SetTo(v UpdateMemberRoleOKMemberRole) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateMemberRoleOKMemberRole) Get() (v UpdateMemberRoleOKMemberRole, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateMemberRoleOKMemberRole) Or(d UpdateMemberRoleOKMemberRole) UpdateMemberRoleOKMemberRole {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUsername returns new OptUsername with value set to v.
func NewOptUsername(v Username) OptUsername {
	return OptUsername{
		Value: v,
		Set:   true,
	}
}

// OptUsername is optional Username.
type OptUsername struct {
	Value Username
	Set   bool
}

// IsSet returns true if OptUsername was set.
func (o OptUsername) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUsername) Reset() {
	var v Username
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUsername) SetTo(v Username) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUsername) Get() (v Username, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUsername) Or(d Username) Username {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Organization
type Organization struct {
	// The organization name. Every user has a `personal` organization for their own account.
	Name OptString `json:"name"`
	// The organization slug. This will be your username for `personal` accounts.
	Slug OptString `json:"slug"`
	// The type of account this organization is. Will always be `personal` or `team`.
	Type OptOrganizationType `json:"type"`
	// The name of the organization. Every user has a `personal` organization for their own account.
	Overages OptBool `json:"overages"`
	// Returns the current status for blocked reads.
	BlockedReads OptBool `json:"blocked_reads"`
	// Returns the current status for blocked writes.
	BlockedWrites OptBool `json:"blocked_writes"`
	// The pricing plan identifier this organization is subscribed to.
	PlanID OptString `json:"plan_id"`
	// The billing cycle for the paid plan, if any.
	PlanTimeline OptString `json:"plan_timeline"`
	// The external platform this organization is managed by. Will be empty for Turso managed
	// organizations.
	Platform OptString `json:"platform"`
}

// GetName returns the value of Name.
func (s *Organization) GetName() OptString {
	return s.Name
}

// GetSlug returns the value of Slug.
func (s *Organization) GetSlug() OptString {
	return s.Slug
}

// GetType returns the value of Type.
func (s *Organization) GetType() OptOrganizationType {
	return s.Type
}

// GetOverages returns the value of Overages.
func (s *Organization) GetOverages() OptBool {
	return s.Overages
}

// GetBlockedReads returns the value of BlockedReads.
func (s *Organization) GetBlockedReads() OptBool {
	return s.BlockedReads
}

// GetBlockedWrites returns the value of BlockedWrites.
func (s *Organization) GetBlockedWrites() OptBool {
	return s.BlockedWrites
}

// GetPlanID returns the value of PlanID.
func (s *Organization) GetPlanID() OptString {
	return s.PlanID
}

// GetPlanTimeline returns the value of PlanTimeline.
func (s *Organization) GetPlanTimeline() OptString {
	return s.PlanTimeline
}

// GetPlatform returns the value of Platform.
func (s *Organization) GetPlatform() OptString {
	return s.Platform
}

// SetName sets the value of Name.
func (s *Organization) SetName(val OptString) {
	s.Name = val
}

// SetSlug sets the value of Slug.
func (s *Organization) SetSlug(val OptString) {
	s.Slug = val
}

// SetType sets the value of Type.
func (s *Organization) SetType(val OptOrganizationType) {
	s.Type = val
}

// SetOverages sets the value of Overages.
func (s *Organization) SetOverages(val OptBool) {
	s.Overages = val
}

// SetBlockedReads sets the value of BlockedReads.
func (s *Organization) SetBlockedReads(val OptBool) {
	s.BlockedReads = val
}

// SetBlockedWrites sets the value of BlockedWrites.
func (s *Organization) SetBlockedWrites(val OptBool) {
	s.BlockedWrites = val
}

// SetPlanID sets the value of PlanID.
func (s *Organization) SetPlanID(val OptString) {
	s.PlanID = val
}

// SetPlanTimeline sets the value of PlanTimeline.
func (s *Organization) SetPlanTimeline(val OptString) {
	s.PlanTimeline = val
}

// SetPlatform sets the value of Platform.
func (s *Organization) SetPlatform(val OptString) {
	s.Platform = val
}

// Ref: #/components/schemas/OrganizationPlan
type OrganizationPlan struct {
	// The name of the plan.
	Name OptString `json:"name"`
	// The monthly price of the plan.
	Price  OptString     `json:"price"`
	Prices []PlanPrice   `json:"prices"`
	Quotas OptPlanQuotas `json:"quotas"`
}

// GetName returns the value of Name.
func (s *OrganizationPlan) GetName() OptString {
	return s.Name
}

// GetPrice returns the value of Price.
func (s *OrganizationPlan) GetPrice() OptString {
	return s.Price
}

// GetPrices returns the value of Prices.
func (s *OrganizationPlan) GetPrices() []PlanPrice {
	return s.Prices
}

// GetQuotas returns the value of Quotas.
func (s *OrganizationPlan) GetQuotas() OptPlanQuotas {
	return s.Quotas
}

// SetName sets the value of Name.
func (s *OrganizationPlan) SetName(val OptString) {
	s.Name = val
}

// SetPrice sets the value of Price.
func (s *OrganizationPlan) SetPrice(val OptString) {
	s.Price = val
}

// SetPrices sets the value of Prices.
func (s *OrganizationPlan) SetPrices(val []PlanPrice) {
	s.Prices = val
}

// SetQuotas sets the value of Quotas.
func (s *OrganizationPlan) SetQuotas(val OptPlanQuotas) {
	s.Quotas = val
}

// The type of account this organization is. Will always be `personal` or `team`.
type OrganizationType string

const (
	OrganizationTypePersonal OrganizationType = "personal"
	OrganizationTypeTeam     OrganizationType = "team"
)

// AllValues returns all OrganizationType values.
func (OrganizationType) AllValues() []OrganizationType {
	return []OrganizationType{
		OrganizationTypePersonal,
		OrganizationTypeTeam,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OrganizationType) MarshalText() ([]byte, error) {
	switch s {
	case OrganizationTypePersonal:
		return []byte(s), nil
	case OrganizationTypeTeam:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrganizationType) UnmarshalText(data []byte) error {
	switch OrganizationType(data) {
	case OrganizationTypePersonal:
		*s = OrganizationTypePersonal
		return nil
	case OrganizationTypeTeam:
		*s = OrganizationTypeTeam
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PlanPrice
type PlanPrice struct {
	// Price of the available plan.
	Value OptString `json:"value"`
	// Payment regularity.
	Timeline OptString `json:"timeline"`
}

// GetValue returns the value of Value.
func (s *PlanPrice) GetValue() OptString {
	return s.Value
}

// GetTimeline returns the value of Timeline.
func (s *PlanPrice) GetTimeline() OptString {
	return s.Timeline
}

// SetValue sets the value of Value.
func (s *PlanPrice) SetValue(val OptString) {
	s.Value = val
}

// SetTimeline sets the value of Timeline.
func (s *PlanPrice) SetTimeline(val OptString) {
	s.Timeline = val
}

// Ref: #/components/schemas/PlanQuotas
type PlanQuotas struct {
	// The number of rows read allowed for the specific plan.
	RowsRead OptInt `json:"rowsRead"`
	// The number of rows written allowed for the specific plan.
	RowsWritten OptInt `json:"rowsWritten"`
	// The number of databases allowed for the specific plan.
	Databases OptNilInt `json:"databases"`
	// The number of locations allowed for the specific plan.
	Locations OptInt `json:"locations"`
	// The amount of storage allowed for the specific plan, in bytes.
	Storage OptInt `json:"storage"`
	// The number of groups allowed for the specific plan.
	Groups OptInt `json:"groups"`
	// The number of bytes synced allowed for the specific plan, in bytes.
	BytesSynced OptInt `json:"bytesSynced"`
}

// GetRowsRead returns the value of RowsRead.
func (s *PlanQuotas) GetRowsRead() OptInt {
	return s.RowsRead
}

// GetRowsWritten returns the value of RowsWritten.
func (s *PlanQuotas) GetRowsWritten() OptInt {
	return s.RowsWritten
}

// GetDatabases returns the value of Databases.
func (s *PlanQuotas) GetDatabases() OptNilInt {
	return s.Databases
}

// GetLocations returns the value of Locations.
func (s *PlanQuotas) GetLocations() OptInt {
	return s.Locations
}

// GetStorage returns the value of Storage.
func (s *PlanQuotas) GetStorage() OptInt {
	return s.Storage
}

// GetGroups returns the value of Groups.
func (s *PlanQuotas) GetGroups() OptInt {
	return s.Groups
}

// GetBytesSynced returns the value of BytesSynced.
func (s *PlanQuotas) GetBytesSynced() OptInt {
	return s.BytesSynced
}

// SetRowsRead sets the value of RowsRead.
func (s *PlanQuotas) SetRowsRead(val OptInt) {
	s.RowsRead = val
}

// SetRowsWritten sets the value of RowsWritten.
func (s *PlanQuotas) SetRowsWritten(val OptInt) {
	s.RowsWritten = val
}

// SetDatabases sets the value of Databases.
func (s *PlanQuotas) SetDatabases(val OptNilInt) {
	s.Databases = val
}

// SetLocations sets the value of Locations.
func (s *PlanQuotas) SetLocations(val OptInt) {
	s.Locations = val
}

// SetStorage sets the value of Storage.
func (s *PlanQuotas) SetStorage(val OptInt) {
	s.Storage = val
}

// SetGroups sets the value of Groups.
func (s *PlanQuotas) SetGroups(val OptInt) {
	s.Groups = val
}

// SetBytesSynced sets the value of BytesSynced.
func (s *PlanQuotas) SetBytesSynced(val OptInt) {
	s.BytesSynced = val
}

type RemoveLocationFromGroupBadRequest struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *RemoveLocationFromGroupBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *RemoveLocationFromGroupBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*RemoveLocationFromGroupBadRequest) removeLocationFromGroupRes() {}

type RemoveLocationFromGroupOK struct {
	// The group with the removed location.
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *RemoveLocationFromGroupOK) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *RemoveLocationFromGroupOK) SetGroup(val OptGroup) {
	s.Group = val
}

func (*RemoveLocationFromGroupOK) removeLocationFromGroupRes() {}

type RemoveOrganizationMemberNotFound struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *RemoveOrganizationMemberNotFound) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *RemoveOrganizationMemberNotFound) SetError(val OptString) {
	s.Error = val
}

func (*RemoveOrganizationMemberNotFound) removeOrganizationMemberRes() {}

type RemoveOrganizationMemberOK struct {
	Member OptUsername `json:"member"`
}

// GetMember returns the value of Member.
func (s *RemoveOrganizationMemberOK) GetMember() OptUsername {
	return s.Member
}

// SetMember sets the value of Member.
func (s *RemoveOrganizationMemberOK) SetMember(val OptUsername) {
	s.Member = val
}

func (*RemoveOrganizationMemberOK) removeOrganizationMemberRes() {}

type RevokeAPITokenOK struct {
	// The revoked token name.
	Token OptString `json:"token"`
}

// GetToken returns the value of Token.
func (s *RevokeAPITokenOK) GetToken() OptString {
	return s.Token
}

// SetToken sets the value of Token.
func (s *RevokeAPITokenOK) SetToken(val OptString) {
	s.Token = val
}

// The role assigned to the member.
// Ref: #/components/schemas/Member/properties/role
type Role string

const (
	RoleOwner  Role = "owner"
	RoleAdmin  Role = "admin"
	RoleMember Role = "member"
	RoleViewer Role = "viewer"
)

// AllValues returns all Role values.
func (Role) AllValues() []Role {
	return []Role{
		RoleOwner,
		RoleAdmin,
		RoleMember,
		RoleViewer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Role) MarshalText() ([]byte, error) {
	switch s {
	case RoleOwner:
		return []byte(s), nil
	case RoleAdmin:
		return []byte(s), nil
	case RoleMember:
		return []byte(s), nil
	case RoleViewer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Role) UnmarshalText(data []byte) error {
	switch Role(data) {
	case RoleOwner:
		*s = RoleOwner
		return nil
	case RoleAdmin:
		*s = RoleAdmin
		return nil
	case RoleMember:
		*s = RoleMember
		return nil
	case RoleViewer:
		*s = RoleViewer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TransferGroupReq struct {
	// The slug of the organization to transfer the group to.
	Organization OptString `json:"organization"`
}

// GetOrganization returns the value of Organization.
func (s *TransferGroupReq) GetOrganization() OptString {
	return s.Organization
}

// SetOrganization sets the value of Organization.
func (s *TransferGroupReq) SetOrganization(val OptString) {
	s.Organization = val
}

type UnarchiveGroupOK struct {
	// The group that was unarchived.
	Group OptGroup `json:"group"`
}

// GetGroup returns the value of Group.
func (s *UnarchiveGroupOK) GetGroup() OptGroup {
	return s.Group
}

// SetGroup sets the value of Group.
func (s *UnarchiveGroupOK) SetGroup(val OptGroup) {
	s.Group = val
}

func (*UnarchiveGroupOK) unarchiveGroupRes() {}

// UpdateGroupDatabasesOK is response for UpdateGroupDatabases operation.
type UpdateGroupDatabasesOK struct{}

func (*UpdateGroupDatabasesOK) updateGroupDatabasesRes() {}

type UpdateMemberRoleBadRequest struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *UpdateMemberRoleBadRequest) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *UpdateMemberRoleBadRequest) SetError(val OptString) {
	s.Error = val
}

func (*UpdateMemberRoleBadRequest) updateMemberRoleRes() {}

type UpdateMemberRoleForbidden struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *UpdateMemberRoleForbidden) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *UpdateMemberRoleForbidden) SetError(val OptString) {
	s.Error = val
}

func (*UpdateMemberRoleForbidden) updateMemberRoleRes() {}

type UpdateMemberRoleNotFound struct {
	// The error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *UpdateMemberRoleNotFound) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *UpdateMemberRoleNotFound) SetError(val OptString) {
	s.Error = val
}

func (*UpdateMemberRoleNotFound) updateMemberRoleRes() {}

type UpdateMemberRoleOK struct {
	Member OptUpdateMemberRoleOKMember `json:"member"`
}

// GetMember returns the value of Member.
func (s *UpdateMemberRoleOK) GetMember() OptUpdateMemberRoleOKMember {
	return s.Member
}

// SetMember sets the value of Member.
func (s *UpdateMemberRoleOK) SetMember(val OptUpdateMemberRoleOKMember) {
	s.Member = val
}

func (*UpdateMemberRoleOK) updateMemberRoleRes() {}

type UpdateMemberRoleOKMember struct {
	// The username of the updated member.
	Username OptString `json:"username"`
	// The email of the updated member.
	Email OptString `json:"email"`
	// The new role of the updated member.
	Role OptUpdateMemberRoleOKMemberRole `json:"role"`
}

// GetUsername returns the value of Username.
func (s *UpdateMemberRoleOKMember) GetUsername() OptString {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *UpdateMemberRoleOKMember) GetEmail() OptString {
	return s.Email
}

// GetRole returns the value of Role.
func (s *UpdateMemberRoleOKMember) GetRole() OptUpdateMemberRoleOKMemberRole {
	return s.Role
}

// SetUsername sets the value of Username.
func (s *UpdateMemberRoleOKMember) SetUsername(val OptString) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *UpdateMemberRoleOKMember) SetEmail(val OptString) {
	s.Email = val
}

// SetRole sets the value of Role.
func (s *UpdateMemberRoleOKMember) SetRole(val OptUpdateMemberRoleOKMemberRole) {
	s.Role = val
}

// The new role of the updated member.
type UpdateMemberRoleOKMemberRole string

const (
	UpdateMemberRoleOKMemberRoleAdmin  UpdateMemberRoleOKMemberRole = "admin"
	UpdateMemberRoleOKMemberRoleMember UpdateMemberRoleOKMemberRole = "member"
	UpdateMemberRoleOKMemberRoleViewer UpdateMemberRoleOKMemberRole = "viewer"
)

// AllValues returns all UpdateMemberRoleOKMemberRole values.
func (UpdateMemberRoleOKMemberRole) AllValues() []UpdateMemberRoleOKMemberRole {
	return []UpdateMemberRoleOKMemberRole{
		UpdateMemberRoleOKMemberRoleAdmin,
		UpdateMemberRoleOKMemberRoleMember,
		UpdateMemberRoleOKMemberRoleViewer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateMemberRoleOKMemberRole) MarshalText() ([]byte, error) {
	switch s {
	case UpdateMemberRoleOKMemberRoleAdmin:
		return []byte(s), nil
	case UpdateMemberRoleOKMemberRoleMember:
		return []byte(s), nil
	case UpdateMemberRoleOKMemberRoleViewer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateMemberRoleOKMemberRole) UnmarshalText(data []byte) error {
	switch UpdateMemberRoleOKMemberRole(data) {
	case UpdateMemberRoleOKMemberRoleAdmin:
		*s = UpdateMemberRoleOKMemberRoleAdmin
		return nil
	case UpdateMemberRoleOKMemberRoleMember:
		*s = UpdateMemberRoleOKMemberRoleMember
		return nil
	case UpdateMemberRoleOKMemberRoleViewer:
		*s = UpdateMemberRoleOKMemberRoleViewer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateMemberRoleReq struct {
	// The new role to assign to the member.
	Role UpdateMemberRoleReqRole `json:"role"`
}

// GetRole returns the value of Role.
func (s *UpdateMemberRoleReq) GetRole() UpdateMemberRoleReqRole {
	return s.Role
}

// SetRole sets the value of Role.
func (s *UpdateMemberRoleReq) SetRole(val UpdateMemberRoleReqRole) {
	s.Role = val
}

// The new role to assign to the member.
type UpdateMemberRoleReqRole string

const (
	UpdateMemberRoleReqRoleAdmin  UpdateMemberRoleReqRole = "admin"
	UpdateMemberRoleReqRoleMember UpdateMemberRoleReqRole = "member"
	UpdateMemberRoleReqRoleViewer UpdateMemberRoleReqRole = "viewer"
)

// AllValues returns all UpdateMemberRoleReqRole values.
func (UpdateMemberRoleReqRole) AllValues() []UpdateMemberRoleReqRole {
	return []UpdateMemberRoleReqRole{
		UpdateMemberRoleReqRoleAdmin,
		UpdateMemberRoleReqRoleMember,
		UpdateMemberRoleReqRoleViewer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateMemberRoleReqRole) MarshalText() ([]byte, error) {
	switch s {
	case UpdateMemberRoleReqRoleAdmin:
		return []byte(s), nil
	case UpdateMemberRoleReqRoleMember:
		return []byte(s), nil
	case UpdateMemberRoleReqRoleViewer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateMemberRoleReqRole) UnmarshalText(data []byte) error {
	switch UpdateMemberRoleReqRole(data) {
	case UpdateMemberRoleReqRoleAdmin:
		*s = UpdateMemberRoleReqRoleAdmin
		return nil
	case UpdateMemberRoleReqRoleMember:
		*s = UpdateMemberRoleReqRoleMember
		return nil
	case UpdateMemberRoleReqRoleViewer:
		*s = UpdateMemberRoleReqRoleViewer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateOrganizationOK struct {
	// The updated organization.
	Organization OptOrganization `json:"organization"`
}

// GetOrganization returns the value of Organization.
func (s *UpdateOrganizationOK) GetOrganization() OptOrganization {
	return s.Organization
}

// SetOrganization sets the value of Organization.
func (s *UpdateOrganizationOK) SetOrganization(val OptOrganization) {
	s.Organization = val
}

type UpdateOrganizationReq struct {
	// Enable or disable overages for the organization.
	Overages OptBool `json:"overages"`
}

// GetOverages returns the value of Overages.
func (s *UpdateOrganizationReq) GetOverages() OptBool {
	return s.Overages
}

// SetOverages sets the value of Overages.
func (s *UpdateOrganizationReq) SetOverages(val OptBool) {
	s.Overages = val
}

type UploadDatabaseDumpOK struct {
	// URL of the uploaded database dump.
	DumpURL OptURI `json:"dump_url"`
}

// GetDumpURL returns the value of DumpURL.
func (s *UploadDatabaseDumpOK) GetDumpURL() OptURI {
	return s.DumpURL
}

// SetDumpURL sets the value of DumpURL.
func (s *UploadDatabaseDumpOK) SetDumpURL(val OptURI) {
	s.DumpURL = val
}

type UploadDatabaseDumpReq struct {
	// Database dump file.
	File ht.MultipartFile `json:"file"`
}

// GetFile returns the value of File.
func (s *UploadDatabaseDumpReq) GetFile() ht.MultipartFile {
	return s.File
}

// SetFile sets the value of File.
func (s *UploadDatabaseDumpReq) SetFile(val ht.MultipartFile) {
	s.File = val
}

type Username string

type ValidateAPITokenOK struct {
	// The time of expiration for the provided token in unix epoch seconds, or `-1` if there is no
	// expiration.
	Exp OptInt `json:"exp"`
}

// GetExp returns the value of Exp.
func (s *ValidateAPITokenOK) GetExp() OptInt {
	return s.Exp
}

// SetExp sets the value of Exp.
func (s *ValidateAPITokenOK) SetExp(val OptInt) {
	s.Exp = val
}
